/*
This file is part of Arcadeflex.

Arcadeflex is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Arcadeflex is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Arcadeflex.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ported to v0.28
 * ported to v0.27
 *
 *
 *  NOTES: romsets are from v0.36 roms 
 */



package drivers;
import static arcadeflex.libc.*;
import static mame.commonH.*;
import static mame.cpuintrf.*;
import static mame.driverH.*;
import static mame.mame.*;
import static mame.inptport.*;
import static mame.osdependH.*;
import static sndhrdw._8910intf.*;
import static sndhrdw.generic.*;
import static sndhrdw.pooyan.*;
import static vidhrdw.generic.*;
import static vidhrdw.pooyan.*;
import static mame.memoryH.*;

public class pooyan
{



	static MemoryReadAddress readmem[] =
	{
		new MemoryReadAddress( 0x8000, 0x8fff, MRA_RAM ),	/* color and video RAM */
		new MemoryReadAddress( 0x0000, 0x7fff, MRA_ROM ),
		new MemoryReadAddress( 0xa080, 0xa080, input_port_0_r ),	/* IN0 */
		new MemoryReadAddress( 0xa0a0, 0xa0a0, input_port_1_r ),	/* IN1 */
		new MemoryReadAddress( 0xa0c0, 0xa0c0, input_port_2_r ),	/* IN2 */
		new MemoryReadAddress( 0xa0e0, 0xa0e0, input_port_3_r ),	/* DSW1 */
		new MemoryReadAddress( 0xa000, 0xa000, input_port_4_r ),	/* DSW2 */
		new MemoryReadAddress( -1 )	/* end of table */
	};
	
	static MemoryWriteAddress writemem[] =
	{
		new MemoryWriteAddress( 0x8800, 0x8fff, MWA_RAM ),
		new MemoryWriteAddress( 0x8000, 0x83ff, colorram_w, colorram ),
		new MemoryWriteAddress( 0x8400, 0x87ff, videoram_w, videoram,videoram_size ),
		new MemoryWriteAddress( 0x9010, 0x903f, MWA_RAM, spriteram,spriteram_size ),
		new MemoryWriteAddress( 0x9410, 0x943f, MWA_RAM, spriteram_2 ),
		new MemoryWriteAddress( 0xa180, 0xa180, interrupt_enable_w ),
		new MemoryWriteAddress( 0xa187, 0xa187, MWA_NOP ),
		new MemoryWriteAddress( 0xa100, 0xa100, sound_command_w ),
                new MemoryWriteAddress( 0xa028, 0xa028, MWA_RAM ),
                new MemoryWriteAddress( 0xa000, 0xa000, MWA_NOP ),
		new MemoryWriteAddress( 0x0000, 0x7fff, MWA_ROM ),
		new MemoryWriteAddress( -1 )	/* end of table */
	};



	static MemoryReadAddress sound_readmem[] =
	{
		new MemoryReadAddress( 0x3000, 0x33ff, MRA_RAM ),
		new MemoryReadAddress( 0x4000, 0x4000, AY8910_read_port_0_r ),
		new MemoryReadAddress( 0x6000, 0x6000, AY8910_read_port_1_r ),
		new MemoryReadAddress( 0x0000, 0x1fff, MRA_ROM ),
		new MemoryReadAddress( -1 )	/* end of table */
	};

	static MemoryWriteAddress sound_writemem[] =
	{
		new MemoryWriteAddress( 0x3000, 0x33ff, MWA_RAM ),
		new MemoryWriteAddress( 0x5000, 0x5000, AY8910_control_port_0_w ),
		new MemoryWriteAddress( 0x4000, 0x4000, AY8910_write_port_0_w ),
		new MemoryWriteAddress( 0x7000, 0x7000, AY8910_control_port_1_w ),
		new MemoryWriteAddress( 0x6000, 0x6000, AY8910_write_port_1_w ),
		new MemoryWriteAddress( 0x0000, 0x1fff, MWA_ROM ),
		new MemoryWriteAddress( -1 )	/* end of table */
	};


	
	static InputPort input_ports[] =
	{
		new InputPort(	/* IN0 */
			0xff,
			new int[] { 0, 0, OSD_KEY_3, OSD_KEY_1, OSD_KEY_2, 0, 0, 0 }
		),
		new InputPort(	/* IN1 */
			0xff,
			new int[] { OSD_KEY_LEFT, OSD_KEY_RIGHT, OSD_KEY_UP, OSD_KEY_DOWN, OSD_KEY_CONTROL, 0, 0, 0 }
		),
		new InputPort(	/* IN2 */
			0xff,
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0 }
		),
		new InputPort(	/* DSW1 */
			0xff,
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0 }
		),
		new InputPort(	/* DSW2 */
			0x73,
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0 }
		),
		new InputPort( -1 )	/* end of table */
	};

        static TrakPort trak_ports[] =
        {
                new TrakPort( -1)
        };


        static KEYSet keys[] =
        {
                 new KEYSet( 1, 2, "MOVE UP" ),
                 new KEYSet( 1, 0, "MOVE LEFT"  ),
                 new KEYSet( 1, 1, "MOVE RIGHT" ),
                 new KEYSet( 1, 3, "MOVE DOWN" ),
                 new KEYSet( 1, 4, "FIRE"      ),
                 new KEYSet( -1 )
        };
	
	static DSW dsw[] =
	{
		new DSW( 4, 0x03, "LIVES", new String[] { "255", "5", "4", "3" },1 ),
		new DSW( 4, 0x08, "BONUS", new String[] { "30000", "50000" } ),
		new DSW( 4, 0x70, "DIFFICULTY", new String[] { "HARDEST", "HARD", "DIFFICULT", "MEDIUM", "NORMAL", "EASIER", "EASY" , "EASIEST" }, 1 ),
		new DSW( 4, 0x80, "DEMO SOUNDS", new String[] { "ON", "OFF" }, 1 ),
		new DSW( -1 )
	};


	
	static GfxLayout charlayout = new GfxLayout
	(
		8,8,	/* 8*8 characters */
		256,	/* 256 characters */
		4,	/* 4 bits per pixel */
		new int[] { 0x1000*8+4, 0x1000*8+0, 4, 0 },
		new int[] { 7*8, 6*8, 5*8, 4*8, 3*8, 2*8, 1*8, 0*8 },
		new int[] { 0, 1, 2, 3, 8*8+0,8*8+1,8*8+2,8*8+3 },
		16*8	/* every char takes 16 consecutive bytes */
	);
	static GfxLayout spritelayout = new GfxLayout
	(
		16,16,	/* 16*16 sprites */
		64,	/* 64 sprites */
		4,	/* 4 bits per pixel */
		new int[] { 0x1000*8+4, 0x1000*8+0, 4, 0 },
		new int[] { 39*8, 38*8, 37*8, 36*8, 35*8, 34*8, 33*8, 32*8,
					7*8, 6*8, 5*8, 4*8, 3*8, 2*8, 1*8, 0*8 },
		new int[] { 0, 1, 2, 3,  8*8, 8*8+1, 8*8+2, 8*8+3,
					16*8+0, 16*8+1, 16*8+2, 16*8+3,  24*8+0, 24*8+1, 24*8+2, 24*8+3 },
		64*8	/* every sprite takes 64 consecutive bytes */
	);


	
	static GfxDecodeInfo gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( 1, 0x0000, charlayout,       0, 16 ),
		new GfxDecodeInfo( 1, 0x2000, spritelayout, 16*16, 16 ),
		new GfxDecodeInfo( -1 ) /* end of array */
	};


	
	/* these are NOT the original color PROMs */
	static char color_prom[] =
	{
		/* char palette */
		0x0F,0xE1,0x1C,0x03,0xFF,0xF7,0xD0,0x88,0xB0,0xD4,0x1C,0x10,0xFD,0x41,0x92,0xFB,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x10,0xFC,0x49,0x92,0xFF,
		0x0F,0xE1,0x02,0x03,0x08,0xA0,0xD0,0x88,0xB0,0xD4,0x1C,0x10,0xFC,0x69,0x92,0xFB,
		0x0F,0x01,0x02,0x03,0xFC,0x10,0x3C,0x88,0xB0,0xD4,0x1C,0xB0,0xFC,0x49,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x1C,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0xFD,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x81,0x02,0x1C,0xE8,0xFC,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0xE0,0x90,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0xFC,0x02,0x03,0xE1,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0x08,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0x01,0x02,0x03,0xE0,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFF,
		0x0F,0xDC,0x06,0x1C,0xFF,0xE0,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0xFD,0x92,0xFF,
		0x0F,0xDC,0x02,0x03,0xFF,0x10,0x1C,0x88,0xB0,0xD4,0x1C,0x90,0xFC,0x49,0x92,0xFB,

		/* Sprite palette */
		0x69,0xCD,0xB0,0x03,0xC1,0xF7,0xD4,0xE9,0x6E,0xD0,0x5D,0x30,0xFF,0x00,0xE3,0xFB,
		0x48,0xCC,0x02,0x03,0xC0,0x10,0xFC,0x09,0xD0,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0x01,0x22,0xFF,0x08,0x10,0x0F,0xFF,0x12,0x17,0xDF,0xFF,0xFC,0x09,0xFF,0x0F,
		0x00,0x01,0x21,0x0F,0x08,0x10,0x0F,0xFF,0x12,0x1F,0x0F,0xFF,0xFC,0x29,0x6F,0xFF,
		0x48,0xD6,0x02,0x03,0xC0,0x10,0xFC,0x09,0xB0,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0x01,0x02,0x03,0xD7,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0xD8,0x92,0xFF,
		0x48,0xDB,0xA0,0x03,0xE0,0xB7,0xDA,0x09,0x14,0x1C,0xDE,0x90,0x98,0x49,0x92,0xFF,
		0x48,0xDB,0xB6,0x03,0xE0,0x10,0xA1,0x80,0x12,0x1C,0xDE,0x92,0xB5,0x49,0x92,0xFF,
		0x48,0x01,0x02,0x0F,0x08,0x10,0xFF,0xFF,0x12,0x1F,0xDE,0xFF,0xFC,0x49,0x0F,0xFF,
		0x48,0xF8,0x02,0x03,0xE0,0x10,0xFC,0x09,0xF4,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0xEF,0x02,0x01,0x08,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0xFC,0x02,0x03,0x08,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0xE0,0x02,0x03,0x08,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0x48,0x92,0xFF,
		0x48,0x01,0x02,0x03,0x08,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0x48,0x92,0xFF,
		0x48,0xE3,0x02,0x03,0x08,0x10,0x1C,0x09,0x12,0x1F,0xDE,0x90,0xFC,0x49,0x92,0xFF,
		0x48,0x1B,0x02,0x03,0xA8,0xF7,0x1C,0x09,0x12,0x1F,0x00,0x90,0xFC,0x49,0x92,0xFF
	};


	
	public static MachineDriver machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				3072000,	/* 3.072 Mhz (?) */
				0,
				readmem, writemem, null, null,
				nmi_interrupt, 1
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3072000,	/* 3.072 Mhz (?) */
				2,	/* memory region #2 */
				sound_readmem, sound_writemem, null, null,
				pooyan_sh_interrupt,10
			)
		},
		60,
		null,
	
		/* video hardware */
		32*8, 32*8, new rectangle( 2*8, 30*8-1, 0*8, 32*8-1 ),
		gfxdecodeinfo,
		256, 32*16,
		pooyan_vh_convert_color_prom,
                VIDEO_TYPE_RASTER|VIDEO_SUPPORTS_DIRTY,
		null,
		generic_vh_start,
		generic_vh_stop,
		pooyan_vh_screenrefresh,

		/* sound hardware */
		null,
		null,
		pooyan_sh_start,
		AY8910_sh_stop,
		AY8910_sh_update
	);



	/***************************************************************************
	
	  Game driver(s)
	
	***************************************************************************/
	static RomLoadPtr  pooyan_rom= new RomLoadPtr(){ public void handler() 
        {
		ROM_REGION(0x10000);	/* 64k for code */
		ROM_LOAD("1.4a",  0x0000, 0x2000, 0xbb319c63 );
		ROM_LOAD("2.5a",  0x2000, 0x2000, 0xa1463d98 );
		ROM_LOAD("3.6a",  0x4000, 0x2000, 0xfe1a9e08 );
		ROM_LOAD("4.7a",  0x6000, 0x2000, 0x9e0f9bcc );
	
		ROM_REGION(0x4000);	/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD("8.10g", 0x0000, 0x1000, 0x931b29eb );
		ROM_LOAD("7.9g",  0x1000, 0x1000, 0xbbe6d6e4 );
		ROM_LOAD("6.9a",  0x2000, 0x1000, 0xb2d8c121 );
		ROM_LOAD("5.8a",  0x3000, 0x1000, 0x1097c2b6 );

		ROM_REGION(0x10000);	/* 64k for the audio CPU */
		ROM_LOAD("xx.7a",  0x0000, 0x1000, 0xfbe2b368 );
		ROM_LOAD("xx.8a",  0x1000, 0x1000, 0xe1795b3d );
	        ROM_END();
        }};
			
	static HiscoreLoadPtr hiload = new HiscoreLoadPtr() { public int handler()
	{
		/* get RAM pointer (this game is multiCPU, we can't assume the global */
		/* RAM pointer is pointing to the right place) */
		char []RAM = Machine.memory_region[0];


		/* check if the hi score table has already been initialized */
/*TOFIX        		if (memcmp(RAM, 0x8a00, new char[] { 0x00, 0x00, 0x01 }, 3) == 0 &&
				memcmp(RAM, 0x8a1b, new char[] { 0x00, 0x00, 0x01 }, 3) == 0)
		{
			FILE f;
	
	
			if ((f = fopen(name, "rb")) != null)
			{
				fread(RAM, 0x89c0, 1, 3*10, f);
				fread(RAM, 0x8a00, 1, 3*10, f);
				fread(RAM, 0x8e00, 1, 3*10, f);
				RAM[0x88a8] = RAM[0x8a00];
				RAM[0x88a9] = RAM[0x8a01];
				RAM[0x88aa] = RAM[0x8a02];
				fclose(f);
			}
	
			return 1;
		}
		else */return 0;	/* we can't load the hi scores yet */
	} };
		
		
		
	static HiscoreSavePtr hisave = new HiscoreSavePtr() { public void handler()
	{
		FILE f;
		/* get RAM pointer (this game is multiCPU, we can't assume the global */
		/* RAM pointer is pointing to the right place) */
		char []RAM = Machine.memory_region[0];
	
	
/*TOFIX        		if ((f = fopen(name, "wb")) != null)
		{
			fwrite(RAM, 0x89c0, 1, 3*10, f);
			fwrite(RAM, 0x8a00, 1, 3*10, f);
			fwrite(RAM, 0x8e00, 1, 3*10, f);
			fclose(f);
		}*/
	} };



	public static GameDriver pooyan_driver = new GameDriver
	(
                "Pooyan",
		"pooyan",
                "MIKE CUDDY\nALLARD VAN DER BAS\nNICOLA SALMORIA",
		machine_driver,
	
		pooyan_rom,
		null, null,
		null,
	
		
                input_ports,null, trak_ports, dsw, keys,
	
		color_prom, null, null,
		ORIENTATION_DEFAULT,
	
		hiload, hisave
	);
}
