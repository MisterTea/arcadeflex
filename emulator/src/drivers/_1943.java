//TODO there are some hacks here due to the fact that 0.29 core features haven't complete. FIX THEM

/*
 * ported to v0.29
 * using automatic conversion tool v0.04
 * converted at : 31-08-2011 23:28:34
 *
 *
 * roms are from v0.36 romset
 *
 */ 
package drivers;

import static arcadeflex.libc.*;
import static mame.commonH.*;
import static mame.cpuintrf.*;
import static mame.driverH.*;
import static mame.mame.*;
import static mame.osdependH.*;
import static sndhrdw._8910intf.*;
import static sndhrdw.capcom.*;
import static sndhrdw.generic.*;
import static machine._1943.*;
import static vidhrdw.generic.*;
import static vidhrdw._1943.*;
import static mame.inptport.*;
import static mame.memoryH.*;

public class _1943
{
	
	static MemoryReadAddress readmem[] =
	{
		new MemoryReadAddress( 0x0000, 0x7fff, MRA_ROM ),
/*TEMPHACK*/    new MemoryReadAddress( 0x8000, 0xbfff, MRA_RAM), /*TODO remove when fixed*/
		//new MemoryReadAddress( 0x8000, 0xbfff, MRA_BANK1 ),//TODO for now it is fake we use MRA_RAM for switching until bank switching work properly in mame 0.29...
		new MemoryReadAddress( 0xd000, 0xd7ff, MRA_RAM ),
		new MemoryReadAddress( 0xc000, 0xc000, input_port_0_r ),
		new MemoryReadAddress( 0xc001, 0xc001, input_port_1_r ),
		new MemoryReadAddress( 0xc002, 0xc002, input_port_2_r ),
		new MemoryReadAddress( 0xc003, 0xc003, input_port_3_r ),
		new MemoryReadAddress( 0xc004, 0xc004, input_port_4_r ),
		new MemoryReadAddress( 0xc007, 0xc007, c1943_protection_r ),
		new MemoryReadAddress( 0xe000, 0xffff, MRA_RAM ),
		new MemoryReadAddress( -1 )	/* end of table */
	};
	
	static MemoryWriteAddress writemem[] =
	{
		new MemoryWriteAddress( 0x0000, 0xbfff, MWA_ROM ),
		new MemoryWriteAddress( 0xc800, 0xc800, soundlatch_w ),
		new MemoryWriteAddress( 0xc804, 0xc804, c1943_c804_w ),	/* ROM bank switch, screen flip */
		new MemoryWriteAddress( 0xc806, 0xc806, MWA_NOP ), /* watchdog reset */
		new MemoryWriteAddress( 0xc807, 0xc807, MWA_NOP ), 	/* protection chip write (we don't emulate it) */
		new MemoryWriteAddress( 0xd000, 0xd3ff, videoram_w, videoram, videoram_size ),
		new MemoryWriteAddress( 0xd400, 0xd7ff, colorram_w, colorram ),
		new MemoryWriteAddress( 0xd800, 0xd801, MWA_RAM, c1943_scrolly ),
		new MemoryWriteAddress( 0xd802, 0xd802, MWA_RAM, c1943_scrollx ),
		new MemoryWriteAddress( 0xd803, 0xd804, MWA_RAM, c1943_bgscrolly ),
		new MemoryWriteAddress( 0xd806, 0xd806, c1943_d806_w ),	/* sprites, bg1, bg2 enable */
		new MemoryWriteAddress( 0xe000, 0xefff, MWA_RAM ),
		new MemoryWriteAddress( 0xf000, 0xffff, MWA_RAM, spriteram, spriteram_size ),
		new MemoryWriteAddress( -1 )	/* end of table */
	};
	
	
	static MemoryReadAddress sound_readmem[] =
	{
		new MemoryReadAddress( 0x0000, 0x7fff, MRA_ROM ),
		new MemoryReadAddress( 0xc000, 0xc7ff, MRA_RAM ),
		new MemoryReadAddress( 0xc800, 0xc800, soundlatch_r ),
		new MemoryReadAddress( -1 )	/* end of table */
	};
	
	static MemoryWriteAddress sound_writemem[] =
	{
		new MemoryWriteAddress( 0x0000, 0x7fff, MWA_ROM ),
		new MemoryWriteAddress( 0xc000, 0xc7ff, MWA_RAM ),
		new MemoryWriteAddress( 0xe000, 0xe000, AY8910_control_port_0_w ),
		new MemoryWriteAddress( 0xe001, 0xe001, AY8910_write_port_0_w ),
		new MemoryWriteAddress( 0xe002, 0xe002, AY8910_control_port_1_w ),
		new MemoryWriteAddress( 0xe003, 0xe003, AY8910_write_port_1_w ),
		new MemoryWriteAddress( -1 )	/* end of table */
	};
	
	
	
	static InputPortPtr input_ports = new InputPortPtr(){ public void handler() { 
		PORT_START(); 	/* IN0 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNUSED );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );/* actually, this is VBLANK */
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNKNOWN );/* probably unused */
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN );/* probably unused */
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_COIN2 );
	
		PORT_START(); 	/* IN1 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );/* Button 3, probably unused */
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNUSED );
	
		PORT_START(); 	/* IN2 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );/* Button 3, probably unused */
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNUSED );
	
		PORT_START(); 	/* DSW0 */
		PORT_DIPNAME( 0x0f, 0x08, "Difficulty", IP_KEY_NONE );
		PORT_DIPSETTING(    0x0f, "1 (Easiest)" );
		PORT_DIPSETTING(    0x0e, "2" );
		PORT_DIPSETTING(    0x0d, "3" );
		PORT_DIPSETTING(    0x0c, "4" );
		PORT_DIPSETTING(    0x0b, "5" );
		PORT_DIPSETTING(    0x0a, "6" );
		PORT_DIPSETTING(    0x09, "7" );
		PORT_DIPSETTING(    0x08, "8" );
		PORT_DIPSETTING(    0x07, "9" );
		PORT_DIPSETTING(    0x06, "10" );
		PORT_DIPSETTING(    0x05, "11" );
		PORT_DIPSETTING(    0x04, "12" );
		PORT_DIPSETTING(    0x03, "13" );
		PORT_DIPSETTING(    0x02, "14" );
		PORT_DIPSETTING(    0x01, "15" );
		PORT_DIPSETTING(    0x00, "16 (Hardest)" );
		PORT_DIPNAME( 0x10, 0x10, "2 Players Game", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "1 Credit" );
		PORT_DIPSETTING(    0x10, "2 Credits" );
		PORT_DIPNAME( 0x20, 0x20, "Flip Screen", IP_KEY_NONE );
		PORT_DIPSETTING(    0x20, "Off");
		PORT_DIPSETTING(    0x00, "On");
		PORT_DIPNAME( 0x40, 0x40, "Freeze", IP_KEY_NONE );
		PORT_DIPSETTING(    0x40, "Off");
		PORT_DIPSETTING(    0x00, "On" );
		PORT_BITX(    0x80, 0x80, IPT_DIPSWITCH_NAME | IPF_TOGGLE, "Service Mode", OSD_KEY_F2, IP_JOY_NONE, 0 );
		PORT_DIPSETTING(    0x80, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
	
		PORT_START();       /* DSW1 */
		PORT_DIPNAME( 0x07, 0x07, "Coin 1", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "4 Coins/1 Credit");
		PORT_DIPSETTING(    0x01, "3 Coins/1 Credit" );
		PORT_DIPSETTING(    0x02, "2 Coins/1 Credit" );
		PORT_DIPSETTING(    0x07, "1 Coin/1 Credit" );
		PORT_DIPSETTING(    0x06, "1 Coin/2 Credits" );
		PORT_DIPSETTING(    0x05, "1 Coin/3 Credits" );
		PORT_DIPSETTING(    0x04, "1 Coin/4 Credits" );
		PORT_DIPSETTING(    0x03, "1 Coin/5 Credits" );
		PORT_DIPNAME( 0x38, 0x38, "Coin 2", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "4 Coins/1 Credit");
		PORT_DIPSETTING(    0x08, "3 Coins/1 Credit" );
		PORT_DIPSETTING(    0x10, "2 Coins/1 Credit" );
		PORT_DIPSETTING(    0x38, "1 Coin/1 Credit" );
		PORT_DIPSETTING(    0x30, "1 Coin/2 Credits" );
		PORT_DIPSETTING(    0x28, "1 Coin/3 Credits" );
		PORT_DIPSETTING(    0x20, "1 Coin/4 Credits" );
		PORT_DIPSETTING(    0x18, "1 Coin/5 Credits" );
		PORT_DIPNAME( 0x40, 0x40, "Allow Continue", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "No" );
		PORT_DIPSETTING(    0x40, "Yes" );
		PORT_DIPNAME( 0x80, 0x80, "Demo Sounds", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Off" );
		PORT_DIPSETTING(    0x80, "On" );
	INPUT_PORTS_END(); }}; 
	
	
	
	static GfxLayout charlayout = new GfxLayout
	(
		8,8,	/* 8*8 characters */
		2048,	/* 2048 characters */
		2,	/* 2 bits per pixel */
		new int[] { 4, 0 },
		new int[] { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16 },
		new int[] { 8+3, 8+2, 8+1, 8+0, 3, 2, 1, 0 },
		16*8	/* every char takes 16 consecutive bytes */
	);
	static GfxLayout spritelayout = new GfxLayout
	(
		16,16,	/* 16*16 sprites */
		2048,	/* 2048 sprites */
		4,	/* 4 bits per pixel */
		new int[] { 2048*64*8+4, 2048*64*8+0, 4, 0 },
		new int[] { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16,
				8*16, 9*16, 10*16, 11*16, 12*16, 13*16, 14*16, 15*16 },
		new int[] { 33*8+3, 33*8+2, 33*8+1, 33*8+0, 32*8+3, 32*8+2, 32*8+1, 32*8+0,
				8+3, 8+2, 8+1, 8+0, 3, 2, 1, 0 },
		64*8	/* every sprite takes 64 consecutive bytes */
	);
	static GfxLayout fgtilelayout = new GfxLayout
	(
		32,32,  /* 32*32 tiles */
		512,    /* 512 tiles */
		4,      /* 4 bits per pixel */
		new int[] { 512*256*8+4, 512*256*8+0, 4, 0 },
		new int[] { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16,
				8*16, 9*16, 10*16, 11*16, 12*16, 13*16, 14*16, 15*16,
				16*16, 17*16, 18*16, 19*16, 20*16, 21*16, 22*16, 23*16,
				24*16, 25*16, 26*16, 27*16, 28*16, 29*16, 30*16, 31*16 },
		new int[] { 192*8+8+3, 192*8+8+2, 192*8+8+1, 192*8+8+0, 192*8+3, 192*8+2, 192*8+1, 192*8+0,
				128*8+8+3, 128*8+8+2, 128*8+8+1, 128*8+8+0, 128*8+3, 128*8+2, 128*8+1, 128*8+0,
				64*8+8+3, 64*8+8+2, 64*8+8+1, 64*8+8+0, 64*8+3, 64*8+2, 64*8+1, 64*8+0,
				8+3, 8+2, 8+1, 8+0, 3, 2, 1, 0 },
		256*8	/* every tile takes 256 consecutive bytes */
	);
	static GfxLayout bgtilelayout = new GfxLayout
	(
		32,32,  /* 32*32 tiles */
		128,    /* 128 tiles */
		4,      /* 4 bits per pixel */
		new int[] { 128*256*8+4, 128*256*8+0, 4, 0 },
		new int[] { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16,
				8*16, 9*16, 10*16, 11*16, 12*16, 13*16, 14*16, 15*16,
				16*16, 17*16, 18*16, 19*16, 20*16, 21*16, 22*16, 23*16,
				24*16, 25*16, 26*16, 27*16, 28*16, 29*16, 30*16, 31*16 },
		new int[] { 192*8+8+3, 192*8+8+2, 192*8+8+1, 192*8+8+0, 192*8+3, 192*8+2, 192*8+1, 192*8+0,
				128*8+8+3, 128*8+8+2, 128*8+8+1, 128*8+8+0, 128*8+3, 128*8+2, 128*8+1, 128*8+0,
				64*8+8+3, 64*8+8+2, 64*8+8+1, 64*8+8+0, 64*8+3, 64*8+2, 64*8+1, 64*8+0,
				8+3, 8+2, 8+1, 8+0, 3, 2, 1, 0 },
		256*8	/* every tile takes 256 consecutive bytes */
	);
	
	
	
	static GfxDecodeInfo gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( 1, 0x00000, charlayout,                  0, 32 ),
		new GfxDecodeInfo( 1, 0x08000, fgtilelayout,             32*4, 16 ),
		new GfxDecodeInfo( 1, 0x48000, bgtilelayout,       32*4+16*16, 16 ),
		new GfxDecodeInfo( 1, 0x58000, spritelayout, 32*4+16*16+16*16, 16 ),
		new GfxDecodeInfo( -1 ) /* end of array */
	};
	
	
	
	static char color_prom[] =
	{
		/* BMPROM.03: palette red component */
		0x00,0x00,0x00,0x0F,0x0F,0x0D,0x0C,0x0B,0x08,0x04,0x0B,0x08,0x07,0x06,0x05,0x00,
		0x03,0x05,0x07,0x09,0x0B,0x0D,0x0E,0x0B,0x0A,0x07,0x00,0x03,0x09,0x07,0x09,0x00,
		0x0B,0x0C,0x0D,0x05,0x0F,0x0B,0x07,0x00,0x06,0x06,0x07,0x08,0x0A,0x0F,0x0C,0x00,
		0x00,0x06,0x09,0x00,0x08,0x00,0x0B,0x0F,0x03,0x08,0x0D,0x0A,0x07,0x0F,0x01,0x00,
		0x01,0x0D,0x0F,0x0F,0x00,0x0E,0x00,0x0E,0x08,0x05,0x0A,0x0A,0x0F,0x07,0x0E,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x01,0x06,0x08,0x0A,0x0C,0x0F,0x0F,0x0C,0x07,0x09,0x05,0x06,0x0B,0x0D,0x0E,0x00,
		0x06,0x08,0x0B,0x0D,0x0F,0x00,0x00,0x00,0x00,0x07,0x09,0x0C,0x0E,0x0F,0x0E,0x00,
		0x0A,0x06,0x06,0x08,0x0A,0x0C,0x0F,0x00,0x05,0x07,0x09,0x0B,0x0D,0x0E,0x09,0x00,
		0x0C,0x0E,0x0F,0x0F,0x08,0x0C,0x0E,0x0F,0x0F,0x05,0x06,0x07,0x08,0x0A,0x09,0x00,
		0x03,0x04,0x05,0x08,0x0A,0x0C,0x0B,0x0F,0x00,0x00,0x00,0x08,0x0C,0x0F,0x09,0x00,
		0x05,0x0E,0x0C,0x0A,0x08,0x06,0x05,0x07,0x09,0x0B,0x0D,0x0D,0x0C,0x0B,0x09,0x00,
		0x0D,0x0A,0x06,0x04,0x00,0x00,0x00,0x00,0x07,0x08,0x09,0x0B,0x0D,0x0D,0x0B,0x00,
		0x08,0x07,0x06,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* BMPROM.02: palette green component */
		0x00,0x04,0x05,0x00,0x0A,0x0A,0x09,0x08,0x07,0x04,0x0B,0x08,0x07,0x06,0x05,0x00,
		0x04,0x06,0x08,0x0A,0x0C,0x0E,0x0E,0x0A,0x09,0x06,0x06,0x04,0x08,0x09,0x0A,0x00,
		0x0B,0x0C,0x0D,0x06,0x0F,0x0D,0x08,0x07,0x07,0x09,0x0A,0x0B,0x0C,0x0E,0x0D,0x00,
		0x08,0x07,0x0A,0x0B,0x03,0x00,0x05,0x08,0x04,0x08,0x04,0x0A,0x07,0x0F,0x01,0x00,
		0x01,0x0D,0x08,0x0F,0x0E,0x00,0x0E,0x0C,0x04,0x08,0x0A,0x00,0x00,0x00,0x0E,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x01,0x05,0x07,0x09,0x0B,0x0D,0x0F,0x0C,0x07,0x0A,0x06,0x02,0x04,0x08,0x0C,0x00,
		0x00,0x00,0x00,0x06,0x08,0x04,0x06,0x09,0x0B,0x00,0x00,0x04,0x06,0x08,0x0E,0x00,
		0x0A,0x06,0x05,0x07,0x09,0x0B,0x0D,0x09,0x06,0x08,0x0B,0x0D,0x0F,0x03,0x02,0x00,
		0x03,0x06,0x09,0x0D,0x05,0x07,0x09,0x0B,0x0D,0x07,0x08,0x0A,0x0B,0x0D,0x09,0x00,
		0x06,0x08,0x0B,0x00,0x02,0x04,0x0D,0x0F,0x05,0x09,0x0E,0x00,0x02,0x04,0x00,0x00,
		0x04,0x0D,0x0B,0x09,0x07,0x05,0x06,0x08,0x0A,0x0C,0x0E,0x0A,0x09,0x08,0x07,0x00,
		0x0E,0x0E,0x0D,0x0B,0x09,0x08,0x07,0x06,0x05,0x06,0x07,0x08,0x09,0x0B,0x0B,0x00,
		0x08,0x07,0x06,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* BMPROM.01: palette blue component */
		0x00,0x07,0x08,0x00,0x00,0x06,0x05,0x04,0x04,0x04,0x09,0x06,0x05,0x04,0x05,0x00,
		0x01,0x03,0x05,0x07,0x08,0x0A,0x0E,0x09,0x08,0x05,0x09,0x04,0x07,0x0B,0x0B,0x00,
		0x0C,0x0C,0x0D,0x06,0x0C,0x0D,0x08,0x0A,0x04,0x0C,0x0D,0x0E,0x0F,0x0F,0x0F,0x00,
		0x0B,0x0A,0x0A,0x0E,0x00,0x04,0x00,0x00,0x09,0x08,0x00,0x0A,0x07,0x00,0x01,0x00,
		0x01,0x0D,0x00,0x0F,0x0F,0x01,0x02,0x03,0x04,0x00,0x0A,0x00,0x00,0x00,0x0E,0x00,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x01,0x01,0x03,0x05,0x07,0x09,0x0F,0x0C,0x07,0x09,0x05,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x07,0x0C,0x0E,0x0F,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,
		0x0A,0x06,0x06,0x08,0x0B,0x0D,0x0F,0x0D,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x05,0x06,0x07,0x08,0x09,0x00,
		0x08,0x0A,0x0E,0x04,0x05,0x06,0x00,0x00,0x07,0x0B,0x0F,0x00,0x00,0x00,0x00,0x00,
		0x03,0x0C,0x0A,0x08,0x06,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x06,0x05,0x04,0x00,0x00,
		0x0E,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x00,0x00,0x08,0x0A,0x0C,0x09,0x00,
		0x06,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* BMPROM.05: char lookup table */
		0x0F,0x01,0x05,0x00,0x0F,0x01,0x00,0x05,0x0F,0x01,0x02,0x00,0x0F,0x01,0x00,0x02,
		0x0F,0x01,0x07,0x00,0x0F,0x01,0x0C,0x00,0x0F,0x0A,0x0B,0x0F,0x0F,0x0C,0x0D,0x0E,
		0x0F,0x05,0x01,0x00,0x0F,0x02,0x01,0x00,0x0F,0x01,0x02,0x0C,0x0F,0x00,0x0C,0x01,
		0x0F,0x00,0x02,0x01,0x0F,0x03,0x04,0x00,0x0F,0x00,0x05,0x05,0x0F,0x00,0x05,0x01,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		/* BMPROM.10: foreground lookup table */
		0x0F,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x06,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,
		0x0F,0x08,0x08,0x06,0x0A,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x0B,0x0C,0x0E,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x0A,0x0F,0x0F,0x0F,0x0F,0x07,0x00,0x0D,0x0E,0x00,0x01,0x02,0x06,0x0F,0x0E,
		0x0F,0x06,0x04,0x05,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0E,
		0x0F,0x01,0x02,0x0A,0x07,0x00,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x0F,0x0F,0x0E,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x07,0x08,0x0D,0x0E,0x00,0x01,0x02,0x06,0x0F,0x0E,
		0x0F,0x01,0x08,0x02,0x03,0x04,0x05,0x05,0x0A,0x03,0x06,0x09,0x0C,0x0B,0x01,0x0E,
		0x0F,0x09,0x02,0x03,0x06,0x05,0x06,0x07,0x08,0x0E,0x0A,0x0B,0x0C,0x0E,0x0B,0x0E,
		0x0F,0x09,0x01,0x03,0x06,0x0B,0x09,0x0C,0x0E,0x0E,0x0B,0x09,0x0C,0x0E,0x0E,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		/* BMPROM.09: foreground palette bank */
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x02,0x03,0x03,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x03,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x01,0x00,0x00,0x00,0x00,0x02,0x03,0x01,0x01,0x02,0x02,0x02,0x01,0x00,0x03,
		0x00,0x01,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x01,0x02,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x01,0x01,0x02,0x02,0x02,0x01,0x00,0x03,
		0x00,0x01,0x02,0x01,0x01,0x01,0x01,0x03,0x01,0x03,0x01,0x00,0x03,0x03,0x02,0x03,
		0x00,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,
		0x00,0x02,0x00,0x00,0x01,0x03,0x03,0x03,0x00,0x03,0x03,0x03,0x03,0x00,0x03,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		/* BMPROM.12: background lookup table */
		0x02,0x0A,0x07,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x01,0x02,0x0A,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
		0x03,0x04,0x06,0x07,0x0D,0x05,0x06,0x07,0x08,0x06,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,
		0x03,0x04,0x06,0x07,0x0D,0x09,0x03,0x04,0x0C,0x06,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,
		0x03,0x02,0x0A,0x07,0x00,0x09,0x0B,0x0C,0x0E,0x06,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,
		0x0A,0x00,0x09,0x0A,0x0C,0x00,0x01,0x02,0x03,0x04,0x05,0x04,0x0B,0x0A,0x06,0x0E,
		0x0A,0x00,0x09,0x0A,0x0C,0x0D,0x06,0x0A,0x06,0x07,0x0C,0x0E,0x0B,0x0B,0x0D,0x0E,
		0x0A,0x00,0x09,0x0A,0x0C,0x00,0x01,0x02,0x03,0x04,0x05,0x0C,0x0B,0x0B,0x0D,0x0E,
		0x0A,0x00,0x09,0x0A,0x0C,0x0D,0x01,0x08,0x03,0x04,0x05,0x07,0x0B,0x06,0x0D,0x0E,
		0x00,0x07,0x08,0x0C,0x09,0x0B,0x03,0x06,0x02,0x00,0x00,0x07,0x0A,0x02,0x03,0x0E,
		0x0A,0x07,0x08,0x0C,0x09,0x0B,0x03,0x06,0x02,0x00,0x0B,0x03,0x06,0x02,0x0C,0x0E,
		0x0A,0x0B,0x03,0x06,0x02,0x0B,0x03,0x06,0x02,0x00,0x07,0x08,0x0C,0x09,0x0C,0x0E,
		0x0A,0x07,0x08,0x0C,0x09,0x0B,0x03,0x06,0x02,0x00,0x07,0x08,0x0C,0x09,0x0C,0x0E,
		0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x0A,0x0B,0x0C,0x0E,0x0D,0x00,0x0E,
		/* BMPROM.11: background palette bank */
		0x00,0x01,0x02,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x03,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,
		0x03,0x03,0x03,0x03,0x03,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x03,
		0x03,0x03,0x03,0x03,0x03,0x01,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x03,
		0x03,0x00,0x01,0x02,0x03,0x02,0x02,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x03,
		0x02,0x03,0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x02,0x03,0x03,0x03,
		0x02,0x03,0x02,0x02,0x02,0x03,0x00,0x01,0x03,0x02,0x00,0x00,0x02,0x00,0x00,0x03,
		0x02,0x03,0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x00,0x00,0x03,
		0x02,0x03,0x02,0x02,0x02,0x03,0x01,0x02,0x01,0x01,0x01,0x03,0x02,0x03,0x00,0x03,
		0x00,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x03,0x02,0x03,0x02,0x01,0x00,0x00,0x03,
		0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x03,0x02,0x01,0x02,0x02,0x03,0x03,0x03,
		0x01,0x01,0x02,0x02,0x03,0x01,0x02,0x02,0x03,0x02,0x01,0x01,0x01,0x01,0x03,0x03,
		0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x03,0x02,0x01,0x01,0x01,0x01,0x03,0x03,
		0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x03,
		/* BMPROM.08: sprite lookup table */
		0x0F,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x00,
		0x0F,0x01,0x02,0x03,0x04,0x05,0x06,0x08,0x07,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x00,
		0x0F,0x00,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x0A,0x05,0x06,0x07,0x08,0x00,
		0x0F,0x00,0x01,0x02,0x03,0x04,0x06,0x08,0x07,0x09,0x0A,0x05,0x06,0x07,0x08,0x00,
		0x0F,0x09,0x0A,0x0B,0x0C,0x0D,0x06,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x00,
		0x0F,0x09,0x0A,0x0B,0x0C,0x0D,0x06,0x01,0x00,0x02,0x03,0x04,0x05,0x06,0x07,0x00,
		0x0F,0x08,0x09,0x0A,0x0B,0x0C,0x06,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x0D,0x00,
		0x0F,0x08,0x09,0x0A,0x0B,0x0C,0x06,0x01,0x00,0x02,0x03,0x04,0x05,0x06,0x0D,0x00,
		0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x00,
		0x0F,0x0E,0x00,0x01,0x02,0x03,0x06,0x00,0x01,0x06,0x07,0x08,0x09,0x0A,0x0D,0x00,
		0x0F,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,0x01,0x00,0x01,0x02,0x03,0x04,0x05,0x00,
		0x0F,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x01,0x0E,0x00,0x01,0x02,0x03,0x04,0x05,0x00,
		0x0F,0x08,0x09,0x0A,0x06,0x07,0x06,0x00,0x01,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x00,
		0x0F,0x08,0x09,0x0A,0x06,0x07,0x06,0x01,0x00,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x00,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x0F,0x0B,0x0D,0x0E,0x00,0x01,0x02,0x03,0x00,0x06,0x01,0x02,0x03,0x04,0x05,0x00,
		/* BMPROM.07: sprite palette bank */
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,
		0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,
		0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
		0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
		0x00,0x02,0x02,0x02,0x02,0x02,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
		0x00,0x02,0x02,0x02,0x02,0x02,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
		0x00,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x00,
		0x00,0x02,0x03,0x03,0x03,0x03,0x00,0x02,0x02,0x05,0x05,0x05,0x05,0x05,0x02,0x00,
		0x08,0x0B,0x0B,0x0B,0x0B,0x0B,0x09,0x0B,0x0A,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x08,
		0x08,0x0B,0x0B,0x0B,0x0B,0x0B,0x09,0x0A,0x0B,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x08,
		0x00,0x02,0x02,0x02,0x04,0x04,0x00,0x02,0x02,0x04,0x04,0x04,0x04,0x04,0x04,0x00,
		0x00,0x02,0x02,0x02,0x04,0x04,0x00,0x02,0x02,0x04,0x04,0x04,0x04,0x04,0x04,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x05,0x05,0x06,0x07,0x07,0x07,0x07,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00
	};
	
	
	
	static MachineDriver machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				6000000,	/* 6 Mhz */
				0,
				readmem,writemem,null,null,
				interrupt,1
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3000000,	/* 3 Mhz */
				2,	/* memory region #2 */
				sound_readmem,sound_writemem,null,null,
				capcom_sh_interrupt,12
			)
		},
		60,
		10,	/* 10 CPU slices per frame - enough for the sound CPU to read all commands */
		null,
	
		/* video hardware */
		32*8, 32*8, new rectangle( 2*8, 30*8-1, 0*8, 32*8-1 ),
		gfxdecodeinfo,
		256,32*4+16*16+16*16+16*16,
		c1943_vh_convert_color_prom,
	
		VIDEO_TYPE_RASTER,
		null,
		c1943_vh_start,
		c1943_vh_stop,
		c1943_vh_screenrefresh,
	
		/* sound hardware */
		null,
		null,
		capcom_sh_start,
		AY8910_sh_stop,
		AY8910_sh_update
	);
	
	
	
	/***************************************************************************
	
	  Game driver(s)
	
	***************************************************************************/
	
	static RomLoadPtr c1943_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x30000);/* 64k for code + 128k for the banked ROMs images */
		ROM_LOAD( "1943.01", 0x00000, 0x8000, 0xc2349190 );
		ROM_LOAD( "1943.02", 0x10000, 0x10000, 0x7f84dc22 );
		ROM_LOAD( "1943.03", 0x20000, 0x10000, 0x727252b4 );
	
		ROM_REGION(0x98000);/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD( "1943.04", 0x00000, 0x8000, 0xa31cdad4 );/* characters */
		ROM_LOAD( "1943.15", 0x08000, 0x8000, 0x3b682598 );/* fg tiles */
		ROM_LOAD( "1943.16", 0x10000, 0x8000, 0xb9d72251 );/* fg tiles */
		ROM_LOAD( "1943.17", 0x18000, 0x8000, 0xf8b4585a );/* fg tiles */
		ROM_LOAD( "1943.18", 0x20000, 0x8000, 0xd50b5d99 );/* fg tiles */
		ROM_LOAD( "1943.19", 0x28000, 0x8000, 0x5f3e4214 );/* fg tiles */
		ROM_LOAD( "1943.20", 0x30000, 0x8000, 0xa9842054 );/* fg tiles */
		ROM_LOAD( "1943.21", 0x38000, 0x8000, 0x948cd1ba );/* fg tiles */
		ROM_LOAD( "1943.22", 0x40000, 0x8000, 0x76e6bdc4 );/* fg tiles */
		ROM_LOAD( "1943.24", 0x48000, 0x8000, 0xe485625f );/* bg tiles */
		ROM_LOAD( "1943.25", 0x50000, 0x8000, 0x402e1da0 );/* bg tiles */
		ROM_LOAD( "1943.06", 0x58000, 0x8000, 0xf811ba7d );/* sprites */
		ROM_LOAD( "1943.07", 0x60000, 0x8000, 0xa796e820 );/* sprites */
		ROM_LOAD( "1943.08", 0x68000, 0x8000, 0x867972c1 );/* sprites */
		ROM_LOAD( "1943.09", 0x70000, 0x8000, 0xe87975d1 );/* sprites */
		ROM_LOAD( "1943.10", 0x78000, 0x8000, 0xbf07571d );/* sprites */
		ROM_LOAD( "1943.11", 0x80000, 0x8000, 0xe33ec696 );/* sprites */
		ROM_LOAD( "1943.12", 0x88000, 0x8000, 0xb1ba27ca );/* sprites */
		ROM_LOAD( "1943.13", 0x90000, 0x8000, 0x7d843cf0 );/* sprites */
	
		ROM_REGION(0x10000);/* 64k for the audio CPU */
		ROM_LOAD( "1943.05", 0x00000, 0x8000, 0xd52cd1ee );
	
		ROM_REGION(0x10000);
		ROM_LOAD( "1943.14", 0x0000, 0x8000, 0x9f128a0c );/* back background */
		ROM_LOAD( "1943.23", 0x8000, 0x8000, 0xf96f6429 );/* front background */
	ROM_END(); }}; 
	
	
	
	public static GameDriver c1943_driver = new GameDriver
	(
		"1943",
		"1943",
		"Mirko Buffoni (MAME driver)\nPaul Leaman (MAME driver)\nNicola Salmoria (MAME driver)\nTim Lindquist (color info)",
		machine_driver,
	
		c1943_rom,
		null, null,
		null,
	
		null/*TBR*/,input_ports,null/*TBR*/,null/*TBR*/,null/*TBR*/,
	
		color_prom, null, null,
		ORIENTATION_DEFAULT,
	
		null, null
	);
}
