//HACKED system 8 driver from mame 0.31

/*
 * ported to v0.29 manual conversion to v0.31
 * using automatic conversion tool v0.04
 * converted at : 19-09-2011 23:58:48
 *
 *
 * roms are from v0.36 romset
 *
 */ 
package drivers;

import static arcadeflex.libc.*;
import static arcadeflex.osdepend.*;
import static mame.commonH.*;
import static mame.cpuintrf.*;
import static mame.driverH.*;
import static mame.mame.*;
import static mame.osdependH.*;;
import static sndhrdw.generic.*;
import static vidhrdw.generic.*;
import static mame.inptport.*;
import static mame.memoryH.*;
import static machine.system8.*;
import static machine.system8H.*;

public class system8
{
	
	
	static MemoryReadAddress readmem[] =
	{
		new MemoryReadAddress( 0x0000, 0xBFFF, MRA_ROM ),
		new MemoryReadAddress( 0xC000, 0xFFFF, MRA_RAM ),
		new MemoryReadAddress( -1 ) /* end of table */
	};
	
	static MemoryWriteAddress writemem[] =
	{
		new MemoryWriteAddress( 0x0000, 0xBFFF, MWA_ROM ),
		new MemoryWriteAddress( 0xD000, 0xD1FF, MWA_RAM, system8_spriteram ),
		new MemoryWriteAddress( 0xD800, 0xD9FF, MWA_RAM, system8_spritepaletteram, system8_spritepaletteram_size ),
		new MemoryWriteAddress( 0xDA00, 0xDBFF, system8_paletteram_w, system8_paletteram, system8_paletteram_size ),
		new MemoryWriteAddress( 0xDC00, 0xDDFF, system8_backgroundpaletteram_w, system8_backgroundpaletteram, system8_backgroundpaletteram_size ),
		new MemoryWriteAddress( 0xE000, 0xE7FF, system8_backgroundram_w, system8_backgroundram, system8_backgroundram_size ),
		new MemoryWriteAddress( 0xE800, 0xEEFF, MWA_RAM, system8_videoram, system8_videoram_size ),
		new MemoryWriteAddress( 0xEFBD, 0xEFBD, MWA_RAM, system8_scroll_y ),
		new MemoryWriteAddress( 0xEFFC, 0xEFFD, MWA_RAM, system8_scroll_x ),
		new MemoryWriteAddress( 0xF020, 0xF03F, MWA_RAM, system8_background_collisionram ),
		new MemoryWriteAddress( 0xF800, 0xFBFF, MWA_RAM, system8_sprites_collisionram ),
		new MemoryWriteAddress( 0xC000, 0xFFFF, MWA_RAM ),
		new MemoryWriteAddress( -1 ) /* end of table */
	};
	
	static MemoryReadAddress wbml_readmem[] =
	{
		new MemoryReadAddress( 0x0000, 0x7fff, MRA_ROM ),
/*TODO FIX ME*///		new MemoryReadAddress( 0x8000, 0xbfff, MRA_BANK1 ),
                new MemoryReadAddress( 0x8000, 0xbfff, MRA_RAM ), /*removed when fixed bank switching*/
		new MemoryReadAddress( 0xc000, 0xfbff, MRA_RAM ),
		new MemoryReadAddress( -1 ) /* end of table */
	};
	
	static MemoryWriteAddress wbml_writemem[] =
	{
		new MemoryWriteAddress( 0x0000, 0xbfff, MWA_ROM ),
		new MemoryWriteAddress( 0xD000, 0xD1FF, MWA_RAM, system8_spriteram ),
		new MemoryWriteAddress( 0xD800, 0xD9FF, MWA_RAM, system8_spritepaletteram, system8_spritepaletteram_size ),
		new MemoryWriteAddress( 0xDC00, 0xDDFF, system8_backgroundpaletteram_w, system8_backgroundpaletteram, system8_backgroundpaletteram_size ),
		new MemoryWriteAddress( 0xDA00, 0xDBFF, system8_paletteram_w, system8_paletteram, system8_paletteram_size ),
		new MemoryWriteAddress( 0xE740, 0xE747, MWA_RAM, system8_bg_pagesel ),
		new MemoryWriteAddress( 0xE7BC, 0xE7FB, choplifter_scroll_x_w, system8_scrollx_ram ),
		new MemoryWriteAddress( 0xE000, 0xE7FF, system8_videoram_w, system8_videoram, system8_videoram_size ),
		new MemoryWriteAddress( 0xE800, 0xEEFF, system8_backgroundram_w, system8_backgroundram, system8_backgroundram_size ),
		new MemoryWriteAddress( 0xF020, 0xF03F, MWA_RAM, system8_background_collisionram ),
		new MemoryWriteAddress( 0xF800, 0xFBFF, MWA_RAM, system8_sprites_collisionram ),
		new MemoryWriteAddress( 0xc000, 0xfbff, MWA_RAM ),
		new MemoryWriteAddress( -1 ) /* end of table */
	};
	
	
	static IOReadPort readport[] =
	{
		new IOReadPort( 0x0000, 0x0000, input_port_0_r ),	/* joy1 */
		new IOReadPort( 0x0004, 0x0004, input_port_1_r ),	/* joy2 */
		new IOReadPort( 0x0008, 0x0008, input_port_2_r ),	/* coin,start */
		new IOReadPort( 0x000C, 0x000C, input_port_3_r ),	/* DIP2 */
		new IOReadPort( 0x0010, 0x0010, input_port_4_r ),	/* DIP1 */
		new IOReadPort( -1 )	/* end of table */
	};
	
	static IOWritePort writeport[] =
	{
		new IOWritePort( 0x0014, 0x0014, system8_soundport_w ), 	/* sound commands */
	/*
		new IOWritePort( 0x0015, 0x0015, UNKNOWN ),
		new IOWritePort( 0x0017, 0x0017, UNKNOWN ),
	*/
		new IOWritePort( -1 )	/* end of table */
	};
	
	static IOReadPort pitfall2_readport[] =
	{
		new IOReadPort( 0x0000, 0x0000, input_port_0_r ),	/* joy1 */
		new IOReadPort( 0x0004, 0x0004, input_port_1_r ),	/* joy2 */
		new IOReadPort( 0x0008, 0x0008, input_port_2_r ),	/* coin,start */
		new IOReadPort( 0x000C, 0x000C, input_port_3_r ),	/* DIP2 */
		new IOReadPort( 0x0010, 0x0010, input_port_4_r ),	/* DIP1 */
	/*	new IOReadPort( 0x0019, 0x0019, pitfall2_unknownport_r ),  */
		new IOReadPort( -1 )	/* end of table */
	};
	
	static IOWritePort pitfall2_writeport[] =
	{
		new IOWritePort( 0x0018, 0x0018, system8_soundport_w ), 	/* sound commands */
	/*	new IOWritePort( 0x0019, 0x0019, pitfall2_unknownport_w ),	*/
		new IOWritePort( -1 )	/* end of table */
	};
	
	static IOReadPort wbml_readport[] =
	{
		new IOReadPort( 0x0000, 0x0000, input_port_0_r ),	/* joy1 */
		new IOReadPort( 0x0004, 0x0004, input_port_1_r ),	/* joy2 */
		new IOReadPort( 0x0008, 0x0008, input_port_2_r ),	/* coin,start */
		new IOReadPort( 0x000C, 0x000C, input_port_3_r ),	/* DIP2 */
		new IOReadPort( 0x000D, 0x000D, input_port_4_r ),	/* DIP1 */
		new IOReadPort( 0x0015, 0x0015, system8_bankswitch_r ),
		new IOReadPort( 0x0016, 0x0016, system8_bg_bankselect_r ),
		new IOReadPort( -1 )	/* end of table */
	};
	
	static IOWritePort wbml_writeport[] =
	{
		new IOWritePort( 0x0014, 0x0014, system8_soundport_w ),	/* sound commands */
		new IOWritePort( 0x0015, 0x0015, system8_bankswitch_w ),
		new IOWritePort( 0x0016, 0x0016, system8_bg_bankselect_w ),
	//	new IOWritePort( 0x0017, 0x0017, choplifter_unknownport_w ),	// ?
		new IOWritePort( -1 )	/* end of table */
	};
	
	static MemoryReadAddress sound_readmem[] =
	{
		new MemoryReadAddress( 0x0000, 0x7FFF, MRA_ROM ),
		new MemoryReadAddress( 0x8000, 0x9FFF, MRA_RAM ),
		new MemoryReadAddress( 0xE000, 0xE000, soundlatch_r ),
		new MemoryReadAddress( -1 ) /* end of table */
	};
	
	static MemoryWriteAddress sound_writemem[] =
	{
		new MemoryWriteAddress( 0x0000, 0x7FFF, MWA_ROM ),
		new MemoryWriteAddress( 0x8000, 0x9FFF, MWA_RAM ),
/*TODO*///		new MemoryWriteAddress( 0xA000, 0xA003, SN76496_0_w ),	/* Choplifter writes to the four addresses */
/*TODO*///		new MemoryWriteAddress( 0xC000, 0xC003, SN76496_1_w ),	/* in sequence */
		new MemoryWriteAddress( -1 ) /* end of table */
	};
	
	
	
	static InputPortPtr wbdeluxe_input_ports = new InputPortPtr(){ public void handler() { 
		PORT_START(); 	/* IN1 */
		PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_UNKNOWN );/* Has to be 0 otherwise the game resets */
													/* if you die after level 1. */
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON1 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON2 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNKNOWN );/* down - unused */
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN );/* up - unused */
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_2WAY );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_2WAY );
	
		PORT_START(); 	/* IN2 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_COCKTAIL );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNKNOWN );/* down - unused */
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN );/* up - unused */
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY | IPF_COCKTAIL );
	
		PORT_START(); 	/* IN0 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_BITX(0x04, IP_ACTIVE_LOW, IPT_SERVICE, "Service Mode", OSD_KEY_F2, IP_JOY_NONE, 0 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN3 );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN );
	
		PORT_START();       /* DSW1 */
		PORT_DIPNAME( 0x0f, 0x0f, "A Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x07, "4/1" );
		PORT_DIPSETTING(    0x08, "3/1" );
		PORT_DIPSETTING(    0x09, "2/1" );
		PORT_DIPSETTING(    0x05, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x04, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x0f, "1/1" );
		PORT_DIPSETTING(    0x03, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x02, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x01, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x06, "2/3" );
		PORT_DIPSETTING(    0x0e, "1/2" );
		PORT_DIPSETTING(    0x0d, "1/3" );
		PORT_DIPSETTING(    0x0c, "1/4" );
		PORT_DIPSETTING(    0x0b, "1/5" );
		PORT_DIPSETTING(    0x0a, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
		PORT_DIPNAME( 0xf0, 0xf0, "B Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x70, "4/1" );
		PORT_DIPSETTING(    0x80, "3/1" );
		PORT_DIPSETTING(    0x90, "2/1" );
		PORT_DIPSETTING(    0x50, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x40, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0xf0, "1/1" );
		PORT_DIPSETTING(    0x30, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x20, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x10, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x60, "2/3" );
		PORT_DIPSETTING(    0xe0, "1/2" );
		PORT_DIPSETTING(    0xd0, "1/3" );
		PORT_DIPSETTING(    0xc0, "1/4" );
		PORT_DIPSETTING(    0xb0, "1/5" );
		PORT_DIPSETTING(    0xa0, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
	
		PORT_START(); 	/* DSW0 */
		PORT_DIPNAME( 0x01, 0x00, "Cabinet", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Upright" );
		PORT_DIPSETTING(    0x01, "Cocktail" );
		PORT_DIPNAME( 0x02, 0x00, "Demo Sounds", IP_KEY_NONE );
		PORT_DIPSETTING(    0x02, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x0c, 0x0c, "Lives", IP_KEY_NONE );
		PORT_DIPSETTING(    0x0c, "3" );
		PORT_DIPSETTING(    0x08, "4" );
		PORT_DIPSETTING(    0x04, "5" );
		PORT_BITX( 0,       0x00, IPT_DIPSWITCH_SETTING | IPF_CHEAT, "Infinite", IP_KEY_NONE, IP_JOY_NONE, 0 );
		PORT_DIPNAME( 0x10, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x10, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x20, 0x20, "Allow Continue", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "No" );
		PORT_DIPSETTING(    0x20, "Yes" );
		PORT_DIPNAME( 0x40, 0x40, "Difficulty", IP_KEY_NONE );
		PORT_DIPSETTING(    0x40, "Easy" );
		PORT_DIPSETTING(    0x00, "Hard" );
		PORT_DIPNAME( 0x80, 0x00, "Energy Consumption", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Slow" );
		PORT_DIPSETTING(    0x80, "Fast" );
	INPUT_PORTS_END(); }}; 
	
	static InputPortPtr wbml_input_ports = new InputPortPtr(){ public void handler() { 
		PORT_START(); 	/* IN1 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY );
	
		PORT_START(); 	/* IN2 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_COCKTAIL );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY | IPF_COCKTAIL );
	
		PORT_START(); 	/* IN0 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN3 );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN );
	
		PORT_START(); 	/* DSW1 */
		PORT_DIPNAME( 0x01, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x01, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x02, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x02, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x0c, 0x0c, "Lives", IP_KEY_NONE );
		PORT_DIPSETTING(    0x04, "3" );
		PORT_DIPSETTING(    0x0c, "4" );
		PORT_DIPSETTING(    0x08, "5" );
	//	PORT_DIPSETTING(    0x00, "4" );
		PORT_DIPNAME( 0x10, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x10, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x20, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x20, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_BITX(    0x40, 0x40, IPT_DIPSWITCH_NAME | IPF_CHEAT, "Test Mode", IP_KEY_NONE, IP_JOY_NONE, 0 );
		PORT_DIPSETTING(    0x40, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x80, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x80, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
	
		PORT_START();       /* DSW0 */
		PORT_DIPNAME( 0x0f, 0x0f, "A Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x07, "4/1" );
		PORT_DIPSETTING(    0x08, "3/1" );
		PORT_DIPSETTING(    0x09, "2/1" );
		PORT_DIPSETTING(    0x05, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x04, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x0f, "1/1" );
		PORT_DIPSETTING(    0x03, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x02, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x01, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x06, "2/3" );
		PORT_DIPSETTING(    0x0e, "1/2" );
		PORT_DIPSETTING(    0x0d, "1/3" );
		PORT_DIPSETTING(    0x0c, "1/4" );
		PORT_DIPSETTING(    0x0b, "1/5" );
		PORT_DIPSETTING(    0x0a, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
		PORT_DIPNAME( 0xf0, 0xf0, "B Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x70, "4/1" );
		PORT_DIPSETTING(    0x80, "3/1" );
		PORT_DIPSETTING(    0x90, "2/1" );
		PORT_DIPSETTING(    0x50, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x40, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0xf0, "1/1" );
		PORT_DIPSETTING(    0x30, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x20, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x10, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x60, "2/3" );
		PORT_DIPSETTING(    0xe0, "1/2" );
		PORT_DIPSETTING(    0xd0, "1/3" );
		PORT_DIPSETTING(    0xc0, "1/4" );
		PORT_DIPSETTING(    0xb0, "1/5" );
		PORT_DIPSETTING(    0xa0, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
	INPUT_PORTS_END(); }}; 
	
	static InputPortPtr pitfall2_input_ports = new InputPortPtr(){ public void handler() { 
		PORT_START(); 	/* IN1 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY );
	
		PORT_START(); 	/* IN2 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_COCKTAIL );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY | IPF_COCKTAIL );
	
		PORT_START(); 	/* IN0 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_BITX(0x04, IP_ACTIVE_LOW, IPT_SERVICE, "Service Mode", OSD_KEY_F2, IP_JOY_NONE, 0 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN3 );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN );
	
		PORT_START();       /* DSW1 */
		PORT_DIPNAME( 0x0f, 0x0f, "A Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x07, "4/1" );
		PORT_DIPSETTING(    0x08, "3/1" );
		PORT_DIPSETTING(    0x09, "2/1" );
		PORT_DIPSETTING(    0x05, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x04, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x0f, "1/1" );
		PORT_DIPSETTING(    0x03, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x02, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x01, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x06, "2/3" );
		PORT_DIPSETTING(    0x0e, "1/2" );
		PORT_DIPSETTING(    0x0d, "1/3" );
		PORT_DIPSETTING(    0x0c, "1/4" );
		PORT_DIPSETTING(    0x0b, "1/5" );
		PORT_DIPSETTING(    0x0a, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
		PORT_DIPNAME( 0xf0, 0xf0, "B Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x70, "4/1" );
		PORT_DIPSETTING(    0x80, "3/1" );
		PORT_DIPSETTING(    0x90, "2/1" );
		PORT_DIPSETTING(    0x50, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x40, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0xf0, "1/1" );
		PORT_DIPSETTING(    0x30, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x20, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x10, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x60, "2/3" );
		PORT_DIPSETTING(    0xe0, "1/2" );
		PORT_DIPSETTING(    0xd0, "1/3" );
		PORT_DIPSETTING(    0xc0, "1/4" );
		PORT_DIPSETTING(    0xb0, "1/5" );
		PORT_DIPSETTING(    0xa0, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
	
		PORT_START(); 	/* DSW0 */
		PORT_DIPNAME( 0x01, 0x00, "Cabinet", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Upright" );
		PORT_DIPSETTING(    0x01, "Cocktail" );
		PORT_DIPNAME( 0x06, 0x06, "Lives", IP_KEY_NONE );
		PORT_DIPSETTING(    0x06, "3");
		PORT_DIPSETTING(    0x04, "4" );
		PORT_DIPSETTING(    0x02, "5" );
		PORT_BITX( 0,       0x00, IPT_DIPSWITCH_SETTING | IPF_CHEAT, "Infinite", IP_KEY_NONE, IP_JOY_NONE, 0 );
		PORT_DIPNAME( 0x18, 0x18, "Starting Stage", IP_KEY_NONE );
		PORT_DIPSETTING(    0x18, "1");
		PORT_DIPSETTING(    0x10, "2" );
		PORT_DIPSETTING(    0x08, "3" );
		PORT_DIPSETTING(    0x00, "4" );
		PORT_DIPNAME( 0x20, 0x00, "Allow Continue", IP_KEY_NONE );
		PORT_DIPSETTING(    0x20, "No");
		PORT_DIPSETTING(    0x00, "Yes");
		PORT_DIPNAME( 0x40, 0x40, "Time", IP_KEY_NONE );
		PORT_DIPSETTING(    0x40, "3 minutes" );
		PORT_DIPSETTING(    0x00, "2 minutes" );
		PORT_DIPNAME( 0x80, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x80, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
	INPUT_PORTS_END(); }}; 
	
	
	static InputPortPtr choplift_input_ports = new InputPortPtr(){ public void handler() { 
		PORT_START(); 	/* IN1 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY );
	
		PORT_START(); 	/* IN2 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_COCKTAIL );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_COCKTAIL );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_COCKTAIL );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  | IPF_8WAY | IPF_COCKTAIL );
	
		PORT_START(); 	/* IN0 */
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_BITX(0x04, IP_ACTIVE_LOW, IPT_SERVICE, "Service Mode", OSD_KEY_F2, IP_JOY_NONE, 0 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN3 );
		PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN );
	
		PORT_START(); 	/* DSW1 */
		PORT_DIPNAME( 0x01, 0x00, "Cabinet", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Upright" );
		PORT_DIPSETTING(    0x01, "Cocktail" );
		PORT_DIPNAME( 0x02, 0x00, "Demo Sounds", IP_KEY_NONE );
		PORT_DIPSETTING(    0x02, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x0c, 0x0c, "Lives", IP_KEY_NONE );
		PORT_DIPSETTING(    0x0c, "3");
		PORT_DIPSETTING(    0x08, "2" );
		PORT_DIPSETTING(    0x04, "4" );
		PORT_BITX( 0,       0x00, IPT_DIPSWITCH_SETTING | IPF_CHEAT, "Infinite", IP_KEY_NONE, IP_JOY_NONE, 0 );
		PORT_DIPNAME( 0x10, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x10, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
		PORT_DIPNAME( 0x20, 0x00, "Bonus Life", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "20000,70000,...");
		PORT_DIPSETTING(    0x20, "50000,100000,...");
		PORT_DIPNAME( 0x40, 0x00, "Difficulty", IP_KEY_NONE );
		PORT_DIPSETTING(    0x00, "Easy" );
		PORT_DIPSETTING(    0x40, "Hard" );
		PORT_DIPNAME( 0x80, 0x00, "Unknown", IP_KEY_NONE );
		PORT_DIPSETTING(    0x80, "Off" );
		PORT_DIPSETTING(    0x00, "On" );
	
		PORT_START();       /* DSW0 */
		PORT_DIPNAME( 0x0f, 0x0f, "A Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x07, "4/1" );
		PORT_DIPSETTING(    0x08, "3/1" );
		PORT_DIPSETTING(    0x09, "2/1" );
		PORT_DIPSETTING(    0x05, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x04, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x0f, "1/1" );
		PORT_DIPSETTING(    0x03, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x02, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x01, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x06, "2/3" );
		PORT_DIPSETTING(    0x0e, "1/2" );
		PORT_DIPSETTING(    0x0d, "1/3" );
		PORT_DIPSETTING(    0x0c, "1/4" );
		PORT_DIPSETTING(    0x0b, "1/5" );
		PORT_DIPSETTING(    0x0a, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
		PORT_DIPNAME( 0xf0, 0xf0, "B Coin/Cred", IP_KEY_NONE );
		PORT_DIPSETTING(    0x70, "4/1" );
		PORT_DIPSETTING(    0x80, "3/1" );
		PORT_DIPSETTING(    0x90, "2/1" );
		PORT_DIPSETTING(    0x50, "2/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x40, "2/1 + Bonus each 4" );
		PORT_DIPSETTING(    0xf0, "1/1" );
		PORT_DIPSETTING(    0x30, "1/1 + Bonus each 5" );
		PORT_DIPSETTING(    0x20, "1/1 + Bonus each 4" );
		PORT_DIPSETTING(    0x10, "1/1 + Bonus each 2" );
		PORT_DIPSETTING(    0x60, "2/3" );
		PORT_DIPSETTING(    0xe0, "1/2" );
		PORT_DIPSETTING(    0xd0, "1/3" );
		PORT_DIPSETTING(    0xc0, "1/4" );
		PORT_DIPSETTING(    0xb0, "1/5" );
		PORT_DIPSETTING(    0xa0, "1/6" );
	/*	PORT_DIPSETTING(    0x00, "1/1" );*/
	INPUT_PORTS_END(); }}; 
	
	
	
	static GfxLayout charlayout = new GfxLayout
	(
		8,8,	/* 8 by 8 */
		2048,	/* 2048 characters */
		3,		/* 3 bits per pixel */
		new int[] { 0, 2048*8*8, 2*2048*8*8 },			/* plane */
		new int[] { 0, 1, 2, 3, 4, 5, 6, 7},			/* x bit */
		new int[] { 0, 8, 16, 24, 32, 40, 48, 56},	/* y bit */
		8*8
	);
	
	static GfxLayout choplift_charlayout = new GfxLayout
	(
		8,8,	/* 8 by 8 */
		4096,	/* 2048 characters */
		3,	/* 3 bits per pixel */
		new int[] { 0, 4096*8*8, 2*4096*8*8 },		/* plane */
		new int[] { 0, 1, 2, 3, 4, 5, 6, 7},		/* x bit */
		new int[] { 0, 8, 16, 24, 32, 40, 48, 56},	/* y bit */
		8*8
	);
	
	
	static GfxDecodeInfo gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( 1, 0x0000, charlayout,    0 , 64),
		new GfxDecodeInfo( 1, 0x0000, charlayout, 64*8 , 64),
		new GfxDecodeInfo( -1 ) /* end of array */
	};
	
	static GfxDecodeInfo choplift_gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( 1, 0x0000, choplift_charlayout,    0, 64),
		new GfxDecodeInfo( 1, 0x0000, choplift_charlayout, 64*8, 64),
		new GfxDecodeInfo( -1 ) /* end of array */
	};
	
	
	
	public static InitMachinePtr wbdeluxe_init_machine= new InitMachinePtr() {	public void handler()
        {
		system8_define_checkspriteram(null);
		system8_define_banksupport(SYSTEM8_SUPPORTS_SPRITEBANKS);
		system8_define_cliparea(16,239,0,223);
		system8_define_spritememsize(2, 0x10000);
		system8_define_sprite_offset_y(16);
	}};
	
	public static InitMachinePtr wbml_init_machine= new InitMachinePtr() {	public void handler()
        {
		system8_define_checkspriteram(null);
		system8_define_banksupport(SYSTEM8_SUPPORTS_SPRITEBANKS);
		system8_define_cliparea(0,255,0,224);
		system8_define_spritememsize(2, 0x20000);
		system8_define_sprite_offset_y(0);
	}};
	
	public static InitMachinePtr pitfall2_init_machine= new InitMachinePtr() {	public void handler()
        {
		system8_define_checkspriteram(pitfall2_clear_spriteram);
		system8_define_banksupport(SYSTEM8_NO_SPRITEBANKS);
		system8_define_cliparea(6,249,0,223);
		system8_define_spritememsize(2, 0x8000);
		system8_define_sprite_offset_y(16);
	}};
	
	public static InitMachinePtr choplift_init_machine= new InitMachinePtr() {	public void handler()
        {
		system8_bankswitch_w.handler(1,123);
		system8_define_checkspriteram(null);
		system8_define_banksupport(SYSTEM8_SUPPORTS_SPRITEBANKS);
		system8_define_cliparea(8,247,16,239);
		system8_define_spritememsize(2, 0x20000);
		system8_define_sprite_offset_y(16);
	}};
	
	
	
	/* the following are not real PROMs, they are totally made up */
	static char wrong_color_prom[] =
	{
		0x00,0x02,0x0F,0x03,0x06,0x08,0x0A,0x0B,0x0F,0x0F,0x00,0x00,0x09,0x0F,0x0F,0x0D,
		0x00,0x0F,0x0F,0x00,0x07,0x05,0x07,0x0A,0x00,0x00,0x0F,0x08,0x08,0x09,0x0C,0x0F,
		0x04,0x0F,0x00,0x0F,0x08,0x0A,0x0B,0x0C,0x05,0x00,0x0F,0x00,0x0F,0x0B,0x0D,0x0F,
		0x0F,0x09,0x06,0x0F,0x0D,0x0F,0x0F,0x0F,0x03,0x0F,0x00,0x0F,0x0F,0x00,0x0E,0x0F,
		0x04,0x0F,0x0F,0x00,0x07,0x0A,0x00,0x0C,0x00,0x00,0x0F,0x0F,0x08,0x09,0x0F,0x0A,
		0x00,0x0F,0x00,0x00,0x0F,0x0F,0x0B,0x0D,0x00,0x0F,0x0F,0x00,0x05,0x0B,0x09,0x0D,
		0x00,0x04,0x00,0x06,0x07,0x08,0x0E,0x0E,0x00,0x0F,0x0F,0x0F,0x0F,0x0B,0x0C,0x0F,
		0x02,0x0F,0x01,0x0F,0x0F,0x08,0x0F,0x0F,0x0F,0x0F,0x0F,0x05,0x02,0x08,0x0F,0x0F,
		0x00,0x02,0x0F,0x0F,0x05,0x0F,0x0D,0x0F,0x00,0x0F,0x0F,0x0F,0x08,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x00,0x0F,0x0F,0x0F,0x0F,0x0B,0x02,0x0F,0x07,0x02,0x0F,0x0F,0x0F,0x0F,
		0x05,0x0F,0x0F,0x03,0x03,0x0F,0x00,0x0F,0x07,0x0F,0x00,0x00,0x06,0x08,0x0C,0x0F,
		0x00,0x0F,0x0F,0x0F,0x0F,0x0C,0x0C,0x0F,0x06,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x08,0x0F,
		0x0F,0x0F,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x0F,0x00,0x0F,0x05,0x0B,0x09,
		0x00,0x0F,0x00,0x00,0x00,0x0F,0x0A,0x0A,0x02,0x0F,0x0F,0x00,0x00,0x00,0x09,0x0B,
		0x03,0x0F,0x0F,0x03,0x03,0x04,0x00,0x05,0x00,0x0F,0x0F,0x06,0x09,0x0B,0x09,0x0F,
	
		0x00,0x02,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x02,
		0x00,0x00,0x00,0x04,0x02,0x00,0x00,0x00,0x00,0x05,0x00,0x06,0x05,0x05,0x00,0x05,
		0x05,0x00,0x09,0x00,0x06,0x05,0x06,0x05,0x08,0x07,0x00,0x00,0x00,0x09,0x07,0x09,
		0x0F,0x00,0x0A,0x00,0x00,0x00,0x0D,0x0B,0x0E,0x00,0x00,0x00,0x00,0x00,0x06,0x0D,
		0x04,0x00,0x00,0x00,0x01,0x04,0x00,0x03,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
		0x05,0x00,0x00,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x02,0x00,
		0x04,0x06,0x00,0x06,0x05,0x04,0x07,0x00,0x06,0x00,0x00,0x00,0x00,0x09,0x07,0x00,
		0x09,0x00,0x09,0x00,0x00,0x09,0x00,0x0A,0x00,0x00,0x00,0x0C,0x09,0x0F,0x00,0x0C,
		0x01,0x04,0x00,0x00,0x04,0x00,0x00,0x05,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x00,0x06,0x03,0x00,0x00,0x00,0x08,
		0x06,0x00,0x00,0x05,0x04,0x00,0x0B,0x06,0x08,0x00,0x00,0x00,0x08,0x08,0x08,0x0A,
		0x09,0x00,0x00,0x00,0x00,0x0C,0x0A,0x0C,0x0D,0x00,0x00,0x00,0x00,0x00,0x0C,0x0E,
		0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x0C,0x07,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
		0x07,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x0B,0x00,0x00,0x09,0x05,0x09,0x09,0x06,
		0x0B,0x00,0x00,0x0D,0x0B,0x0A,0x0D,0x0B,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0D,0x0F,
	
		0x00,0x02,0x00,0x00,0x03,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,
		0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
		0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
		0x0D,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x00,
		0x00,0x03,0x00,0x06,0x05,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x01,0x03,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
		0x09,0x01,0x00,0x00,0x06,0x00,0x06,0x08,0x0F,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,
		0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x06,0x05,0x00,0x06,0x06,0x00,0x00,0x00,0x08,
		0x06,0x00,0x00,0x07,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x0B,0x07,0x08,0x08,0x08,
		0x0A,0x00,0x00,0x00,0x00,0x08,0x09,0x0A,0x09,0x00,0x00,0x00,0x00,0x00,0x0A,0x09,
		0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x08,0x00,
		0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x0F,0x00,0x0D,0x0D,0x09,
		0x0F,0x00,0x0D,0x07,0x09,0x00,0x0F,0x0D,0x0F,0x00,0x00,0x0F,0x0F,0x0F,0x0A,0x0F,
		0x0F,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F
	};
	
	static char wbml_color_prom[] =
	{
		0x00,0x00,0x00,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x04,0x05,0x06,0x07,
		0x08,0x09,0x0A,0x0B,0x0C,0x00,0x0E,0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
		0x08,0x09,0x0A,0x0B,0x0A,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,
		0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x08,0x09,0x0A,
		0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,
		0x0E,0x0F,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x09,0x0A,
		0x0B,0x0C,0x0D,0x0E,0x0F,0x07,0x08,0x08,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x00,
		0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x00,0x00,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,
		0x0E,0x0F,0x00,0x00,0x00,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x00,
		0x00,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x05,0x08,0x07,0x08,0x09,0x0A,0x0B,
		0x0C,0x0D,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x0A,0x09,0x0B,0x0D,0x0E,0x0D,0x0C,0x00,
	
		0x00,0x00,0x00,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x04,0x05,0x06,0x07,
		0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
		0x09,0x0A,0x0B,0x0C,0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
		0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x06,0x07,0x08,0x09,0x0A,
		0x0B,0x0C,0x0D,0x0E,0x0F,0x0B,0x08,0x05,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x07,0x08,0x09,
		0x0A,0x0B,0x0C,0x0D,0x0E,0x00,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,
		0x0C,0x0D,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x03,0x04,0x05,0x06,0x07,
		0x08,0x09,0x0A,0x0B,0x0C,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x05,0x06,
		0x07,0x08,0x09,0x0A,0x0B,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x00,0x00,0x04,0x05,0x06,0x07,0x08,
		0x09,0x0A,0x0B,0x0C,0x0A,0x0B,0x0C,0x0D,0x0F,0x0C,0x0D,0x0F,0x0E,0x0D,0x0C,0x00,
	
		0x00,0x03,0x05,0x07,0x0D,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x01,0x02,0x03,0x04,
		0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x00,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,
		0x0C,0x0D,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x00,0x00,0x00,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,
		0x06,0x07,0x08,0x09,0x0A,0x0A,0x0A,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,
		0x04,0x05,0x06,0x07,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x02,0x03,
		0x04,0x05,0x06,0x07,0x08,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x00,0x00,
		0x02,0x03,0x04,0x05,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x00,0x00,
		0x00,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x07,0x0A,0x07,0x08,0x09,0x0A,0x0B,
		0x0C,0x0D,0x0E,0x0F,0x0A,0x0B,0x0C,0x0D,0x0A,0x09,0x0B,0x0D,0x0F,0x0F,0x0F,0x00,
	};
	
	static char choplift_color_prom[] =
	{
		/* 4B - palette red component */
		0x00,0x02,0x04,0x07,0x09,0x0B,0x0C,0x0D,0x0F,0x00,0x00,0x04,0x07,0x0D,0x00,0x07,
		0x09,0x0A,0x0B,0x00,0x08,0x09,0x0F,0x00,0x08,0x09,0x0B,0x0D,0x0F,0x0A,0x0C,0x0D,
		0x0F,0x00,0x08,0x0B,0x0D,0x0F,0x09,0x0C,0x0F,0x00,0x09,0x0D,0x0E,0x0F,0x00,0x0F,
		0x00,0x0A,0x05,0x00,0x00,0x09,0x08,0x09,0x04,0x0B,0x09,0x0B,0x09,0x0D,0x0D,0x00,
		0x07,0x09,0x0B,0x0D,0x0F,0x0A,0x00,0x04,0x07,0x09,0x0B,0x0C,0x0D,0x05,0x00,0x07,
		0x0B,0x0C,0x0D,0x0F,0x0F,0x07,0x0D,0x0F,0x06,0x06,0x08,0x0A,0x0C,0x0A,0x0E,0x0B,
		0x0F,0x0C,0x0D,0x0F,0x0D,0x0E,0x0F,0x00,0x0F,0x00,0x07,0x08,0x07,0x0A,0x0F,0x09,
		0x0B,0x0E,0x05,0x06,0x00,0x08,0x0D,0x08,0x0F,0x06,0x08,0x09,0x0A,0x0A,0x0D,0x0C,
		0x00,0x0C,0x00,0x06,0x0C,0x07,0x0A,0x09,0x09,0x0A,0x0F,0x0B,0x0D,0x0D,0x00,0x00,
		0x00,0x00,0x07,0x00,0x08,0x00,0x07,0x09,0x0D,0x0F,0x0A,0x0C,0x0E,0x00,0x07,0x09,
		0x0A,0x0B,0x0D,0x0F,0x0C,0x0F,0x00,0x09,0x0B,0x0D,0x0E,0x0F,0x0E,0x0F,0x0B,0x00,
		0x00,0x09,0x0A,0x0B,0x0B,0x0C,0x0D,0x0E,0x0F,0x0F,0x00,0x00,0x00,0x09,0x00,0x00,
		0x0B,0x0C,0x0C,0x0E,0x0C,0x0F,0x00,0x00,0x00,0x00,0x0D,0x0D,0x0F,0x0B,0x0F,0x0E,
		0x0C,0x0E,0x0F,0x00,0x0F,0x0F,0x00,0x09,0x00,0x09,0x0F,0x00,0x09,0x0C,0x0F,0x00,
		0x0F,0x09,0x0D,0x0F,0x00,0x0C,0x0F,0x00,0x09,0x0B,0x0D,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
	
		/* 4B - palette greeen component */
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x04,0x04,0x06,0x07,0x07,
		0x07,0x07,0x07,0x08,0x08,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x0A,0x0A,0x0A,
		0x0A,0x0B,0x0B,0x0B,0x0B,0x0B,0x0C,0x0C,0x0C,0x0D,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,
		0x00,0x07,0x08,0x00,0x06,0x06,0x07,0x07,0x08,0x08,0x02,0x02,0x04,0x04,0x06,0x07,
		0x07,0x07,0x07,0x07,0x07,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x0A,0x0B,0x0B,
		0x0B,0x0B,0x0B,0x0B,0x0C,0x0D,0x0D,0x0F,0x06,0x07,0x08,0x08,0x08,0x09,0x09,0x0A,
		0x0A,0x0B,0x0B,0x0B,0x0C,0x0D,0x0E,0x00,0x04,0x06,0x07,0x07,0x08,0x08,0x08,0x09,
		0x0A,0x0B,0x05,0x06,0x07,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x09,0x0A,0x0A,0x0B,
		0x00,0x04,0x06,0x06,0x06,0x08,0x08,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,0x0C,0x00,0x05,
		0x06,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,0x0B,
		0x0B,0x0B,0x0B,0x0B,0x0C,0x0C,0x0D,0x0D,0x0D,0x0D,0x0D,0x0D,0x0E,0x0E,0x0F,0x00,
		0x07,0x09,0x0A,0x0B,0x0C,0x0C,0x0D,0x0E,0x0E,0x0F,0x00,0x07,0x08,0x08,0x09,0x0A,
		0x0B,0x0C,0x0D,0x0E,0x0F,0x0F,0x00,0x08,0x09,0x0A,0x0D,0x0E,0x0F,0x0B,0x0C,0x0E,
		0x0F,0x0F,0x0F,0x00,0x00,0x08,0x09,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,0x0B,0x0B,0x0C,
		0x0C,0x0D,0x0D,0x0D,0x0E,0x0E,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
	
		/* 4B - palette blue component */
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x02,0x03,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x05,0x05,
		0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,
		0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
		0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
		0x07,0x07,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x0A,0x0A,
		0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,
		0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0A,0x0B,
		0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,
		0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0D,0x0D,0x0D,0x0D,0x0D,0x0D,0x0D,0x0E,0x0E,0x0E,
		0x0E,0x0E,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F
	};
	
	
	//TODO FIX ME!!
//	static struct SN76496interface sn76496_interface =
//	{
//		2,		/* 2 chips */
//		3000000,	/* ??  */
//		{ 255, 255 }
//	};
	
	
	
	static MachineDriver wbdeluxe_machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				3650000,		/* 3.65 MHz ? */
				0,			/* memory region */
				readmem,writemem,readport,writeport,
				interrupt,		/* interrupt routine */
				1			/* interrupts per frame */
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3000000,			/* 3 Mhz ? */
				3,			/* memory region */
				sound_readmem,sound_writemem,null,null,
				interrupt,		/* interrupt routine */
				4			/* interrupts per frame */
			),
	
		},
		60, 
//                DEFAULT_60HZ_VBLANK_DURATION,	/* frames per second, vblank duration */
		1,					/* single CPU, no need for interleaving */
		wbdeluxe_init_machine,
	
		/* video hardware */
		256, 256,				/* screen_width, screen_height */
		new rectangle( 16, 239, 16, 239 ),			/* struct rectangle visible_area */
		gfxdecodeinfo,				/* GfxDecodeInfo */
		256,					/* total colors */
		64*8+64*8,				/* color table length */
		system8_vh_convert_color_prom,	/* convert color prom routine */
	
		VIDEO_TYPE_RASTER,
		null,					/* vh_init routine */
		system8_vh_start,			/* vh_start routine */
		system8_vh_stop,			/* vh_stop routine */
		system8_vh_screenrefresh,		/* vh_update routine */
	
		/* sound hardware */
                null,null,null,null,null //TODO fix me!!!
//		null,null,0,0,
//		{
//			{
//				SOUND_SN76496,
//				&sn76496_interface
//			}
//		}
	);
	
	static MachineDriver pitfall2_machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				3650000,			/* 3.65 MHz ? */
				0,				/* memory region */
				readmem,writemem,pitfall2_readport,pitfall2_writeport,
				interrupt,			/* interrupt routine */
				1				/* interrupts per frame */
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3000000,			/* 3 Mhz ? */
				3,				/* memory region */
				sound_readmem,sound_writemem,null,null,
				interrupt,			/* interrupt routine */
				4				/* interrupts per frame */
			),
	
		},
		60, 
                //DEFAULT_60HZ_VBLANK_DURATION,	/* frames per second, vblank duration */
		1,					/* single CPU, no need for interleaving */
		pitfall2_init_machine,
	
		/* video hardware */
		256, 256,				/* screen_width, screen_height */
		new rectangle( 6, 249, 16, 239 ),			/* struct rectangle visible_area */
		gfxdecodeinfo,				/* GfxDecodeInfo */
		256,					/* total colors */
		64*8+64*8,				/* color table length */
		system8_vh_convert_color_prom,	/* convert color prom routine */
	
		VIDEO_TYPE_RASTER,
		null,					/* vh_init routine */
		system8_vh_start,			/* vh_start routine */
		system8_vh_stop,			/* vh_stop routine */
		system8_vh_screenrefresh,		/* vh_update routine */
	
		/* sound hardware */
                null,null,null,null,null //TODO fix me!!!
/*		null,null,0,0,
		{
			{
				SOUND_SN76496,
				&sn76496_interface
			}
		}*/
	);
	
	static MachineDriver choplift_machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				3650000,			/* 3.65 MHz ? */
				0,				/* memory region */
				wbml_readmem,wbml_writemem,wbml_readport,wbml_writeport,
				interrupt,			/* interrupt routine */
				1				/* interrupts per frame */
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3000000,			/* 3 Mhz ? */
				3,				/* memory region */
				sound_readmem,sound_writemem,null,null,
				interrupt,			/* interrupt routine */
				4				/* interrupts per frame */
			),
		},
		60, 
                //DEFAULT_60HZ_VBLANK_DURATION,	/* frames per second, vblank duration */
		10,					/* single CPU, no need for interleaving */
		choplift_init_machine,
	
		/* video hardware */
		256, 256,						/* screen_width, screen_height */
		new rectangle( 6, 249, 16, 239 ),			/* struct rectangle visible_area */
		choplift_gfxdecodeinfo,			/* GfxDecodeInfo */
		256,							/* total colors */
		64*8+64*8,						/* color table length */
		system8_vh_convert_color_prom,	/* convert color prom routine */
	
		VIDEO_TYPE_RASTER,
		null,								/* vh_init routine */
		system8_vh_start,				/* vh_start routine */
		system8_vh_stop,				/* vh_stop routine */
		choplifter_vh_screenrefresh,		/* vh_update routine */
	
		/* sound hardware */
                null,null,null,null,null //TODO fix me!!!
	/*	null,null,0,0,
		{
			{
				SOUND_SN76496,
				&sn76496_interface
			}
		}*/
	);
	
	static MachineDriver wbml_machine_driver = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_Z80,
				3650000,			/* 3.65 MHz ? */
				0,					/* memory region */
				wbml_readmem,wbml_writemem,wbml_readport,wbml_writeport,
				interrupt,			/* interrupt routine */
				1					/* interrupts per frame */
			),
			new MachineCPU(
				CPU_Z80 | CPU_AUDIO_CPU,
				3000000,			/* 3 Mhz ? */
				3,					/* memory region */
				sound_readmem,sound_writemem,null,null,
				interrupt,			/* interrupt routine */
				4					/* interrupts per frame */
			),
		},
		60, 
                //DEFAULT_60HZ_VBLANK_DURATION,	/* frames per second, vblank duration */
		1,					/* single CPU, no need for interleaving */
		wbml_init_machine,
	
		/* video hardware */
		256, 256,				/* screen_width, screen_height */
		new rectangle( 0, 255, 0, 239 ),			/* struct rectangle visible_area */
		choplift_gfxdecodeinfo,				/* GfxDecodeInfo */
		256,					/* total colors */
		64*8+64*8,				/* color table length */
		system8_vh_convert_color_prom,	/* convert color prom routine */
	
		VIDEO_TYPE_RASTER,
		null,					/* vh_init routine */
		system8_vh_start,			/* vh_start routine */
		system8_vh_stop,			/* vh_stop routine */
		wbml_vh_screenrefresh,		/* vh_update routine */
	
		/* sound hardware */
                null,null,null,null,null //TODO fix me!!!
		/*null,null,0,0,
		{
			{
				SOUND_SN76496,
				&sn76496_interface
			}
		}*/
	);
	
	
	/***************************************************************************
	
	  Game driver(s)
	
	***************************************************************************/
	
	static RomLoadPtr wbdeluxe_rom = new RomLoadPtr(){ public void handler(){ 
		/*ROM_REGION(0x10000);	/* 64k for code */
		/*ROM_LOAD( "WBD1.BIN", 0x0000, 0x2000, 0xfc881b62 );
		ROM_LOAD( "WBD2.BIN", 0x2000, 0x2000, 0x620b2985 );
		ROM_LOAD( "WBD3.BIN", 0x4000, 0x2000, 0x16949c5e );
		ROM_LOAD( "WBD4.BIN", 0x6000, 0x2000, 0x95cc4dd6 );
		ROM_LOAD( "WBD5.BIN", 0x8000, 0x2000, 0xbb73e2a9 );
		ROM_LOAD( "WBD6.BIN", 0xA000, 0x2000, 0xc57f0e3b );
	
		ROM_REGION(0xC000);		/* temporary space for graphics (disposed after conversion) */
		/*ROM_LOAD( "WB.008", 0x00000, 0x4000, 0x18e4fd80 );
		ROM_LOAD( "WB.007", 0x04000, 0x4000, 0x140ec290 );
		ROM_LOAD( "WB.006", 0x08000, 0x4000, 0xbd90ec0c );
	
		ROM_REGION(0x10000);
		ROM_LOAD( "WB.004", 0x00000, 0x4000, 0xa849864b );/* sprites */
		/*ROM_CONTINUE(0x8000,0x4000);
		ROM_LOAD( "WB.005", 0x04000, 0x4000, 0x7c7d23f3 );
		ROM_CONTINUE(0xC000,0x4000);
	
		ROM_REGION(0x10000);		/* 64k for sound cpu */
		/*ROM_LOAD( "WB.009", 0x00000, 0x2000, 0xb2d5545b );*/
            //0.34 loading sequence...
                ROM_REGION(0x10000);	/* 64k for code */
                ROM_LOAD( "wbd1.bin",     0x0000, 0x2000, 0xa1bedbd7 );
                ROM_LOAD( "ic130_03.bin", 0x2000, 0x2000, 0x56463ede );
                ROM_LOAD( "wbd3.bin",     0x4000, 0x2000, 0x6fcdbd4c );
                ROM_LOAD( "ic132_05.bin", 0x6000, 0x2000, 0x7b922708 );
                ROM_LOAD( "wbd5.bin",     0x8000, 0x2000, 0xf6b02902 );
                ROM_LOAD( "wbd6.bin",     0xa000, 0x2000, 0x43df21fe );

                ROM_REGION(0xc000);	/* temporary space for graphics (disposed after conversion) */
                ROM_LOAD( "epr6497.62",   0x0000, 0x2000, 0x08d609ca );
                ROM_LOAD( "epr7496.61",   0x2000, 0x2000, 0x6f61fdf1 );
                ROM_LOAD( "epr7495.64",   0x4000, 0x2000, 0x6a0d2c2d );
                ROM_LOAD( "epr7494.63",   0x6000, 0x2000, 0xa8e281c7 );
                ROM_LOAD( "epr7493.66",   0x8000, 0x2000, 0x89305df4 );
                ROM_LOAD( "epr7492.65",   0xA000, 0x2000, 0x60f806b1 );

                ROM_REGION(0x10000);	/* 64k for sprites data */
                ROM_LOAD( "epr7485.117",  0x0000, 0x4000, 0xc2891722 );
                ROM_LOAD( "epr7487.04",   0x4000, 0x4000, 0x2d3a421b );
                ROM_LOAD( "epr7486.110",  0x8000, 0x4000, 0x8d622c50 );
                ROM_LOAD( "epr7488.05",   0xc000, 0x4000, 0x007c2f1b );

                ROM_REGION(0x10000);	/* 64k for sound cpu */
                ROM_LOAD( "epra7498.120", 0x0000, 0x2000, 0xc198205c );
	ROM_END(); }}; 
	
	//modified to work with 0.36 romset
	static RomLoadPtr wbml_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x40000);	/* 256k for code */
		ROM_LOAD( "WBML.01", 0x20000, 0x8000, 0xa5329b82 );/* Unencrypted opcodes */
		ROM_CONTINUE( 0x0000, 0x8000 );             /* Now load the operands in RAM */
		ROM_LOAD( "WBML.02", 0x30000, 0x8000, 0xcdafb89f );/* Unencrypted opcodes */
		ROM_CONTINUE( 0x10000, 0x8000 );
		ROM_LOAD( "WBML.03", 0x38000, 0x8000, 0x31cd6733 );/* Unencrypted opcodes */
		ROM_CONTINUE( 0x18000, 0x8000 );
	
		ROM_REGION(0x18000);		/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD( "WBML.08", 0x00000, 0x8000, 0xef89ac27 );
		ROM_LOAD( "WBML.09", 0x08000, 0x8000, 0x60a6011e );
		ROM_LOAD( "WBML.10", 0x10000, 0x8000, 0x563078ba );
	
		ROM_REGION(0x20000);
		ROM_LOAD( "epr11028.87", 0x00000, 0x8000, 0x7d7dd491 );/* sprites */
		ROM_LOAD( "epr11027.86", 0x08000, 0x8000, 0x5ba6090a );
		ROM_LOAD( "epr11030.89", 0x10000, 0x8000, 0xf3a6277a );
		ROM_LOAD( "epr11029.88", 0x18000, 0x8000, 0x387db381 );
	
		ROM_REGION(0x10000);	/* 64k for sound cpu */
		ROM_LOAD( "epr11037.126", 0x0000, 0x8000, 0x8057f681 );
	ROM_END(); }}; 
	
	
	static RomLoadPtr pitfall2_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x10000);	/* 64k for code */
		/*ROM_LOAD( "EPR6623" , 0x0000, 0x4000, 0xf9cbca17 );
		ROM_LOAD( "EPR6624A", 0x4000, 0x4000, 0xec525d6e );
		ROM_LOAD( "EPR6625" , 0x8000, 0x4000, 0x3eb82172 );
	
		ROM_REGION(0xC000);		/* temporary space for graphics (disposed after conversion) */
		/*ROM_LOAD( "EPR6474A", 0x00000, 0x2000, 0x2516b784 );
		ROM_LOAD( "EPR6473" , 0x02000, 0x2000, 0x9b50df0c );
		ROM_LOAD( "EPR6472A", 0x04000, 0x2000, 0x352e5484 );
		ROM_LOAD( "EPR6471A", 0x06000, 0x2000, 0x7649c70f );
		ROM_LOAD( "EPR6470A", 0x08000, 0x2000, 0xa1bfc31d );
		ROM_LOAD( "EPR6469A", 0x0a000, 0x2000, 0x680bebef );
	
		ROM_REGION(0x8000);
		/*ROM_LOAD( "EPR6454A" , 0x00000, 0x4000, 0x460b8fe3 );/* sprites */
		/*ROM_LOAD( "EPR6455"  , 0x04000, 0x4000, 0x83827770 );
	
		ROM_REGION(0x10000);	/* 64k for sound cpu */
		/*ROM_LOAD( "EPR6462"  , 0x00000, 0x2000, 0x0ecd1add );*/
                //0.34 loading sequence
                ROM_REGION(0x10000);	/* 64k for code */
                ROM_LOAD( "epr6456a.116", 0x0000, 0x4000, 0xbcc8406b );	/* encrypted */
                ROM_LOAD( "epr6457a.109", 0x4000, 0x4000, 0xa016fd2a );	/* encrypted */
                ROM_LOAD( "epr6458a.96",  0x8000, 0x4000, 0x5c30b3e8 );

                ROM_REGION(0xc000);	/* temporary space for graphics (disposed after conversion) */
                ROM_LOAD( "epr6474a.62",  0x0000, 0x2000, 0x9f1711b9 );
                ROM_LOAD( "epr6473a.61",  0x2000, 0x2000, 0x8e53b8dd );
                ROM_LOAD( "epr6472a.64",  0x4000, 0x2000, 0xe0f34a11 );
                ROM_LOAD( "epr6471a.63",  0x6000, 0x2000, 0xd5bc805c );
                ROM_LOAD( "epr6470a.66",  0x8000, 0x2000, 0x1439729f );
                ROM_LOAD( "epr6469a.65",  0xa000, 0x2000, 0xe4ac6921 );

                ROM_REGION(0x8000);	/* 32k for sprites data */
                ROM_LOAD( "epr6454a.117", 0x0000, 0x4000, 0xa5d96780 );
                ROM_LOAD( "epr6455.05",   0x4000, 0x4000, 0x32ee64a1 );

                ROM_REGION(0x10000);	/* 64k for sound cpu */
                ROM_LOAD( "epr6462.120",  0x0000, 0x2000, 0x86bb9185 );
	ROM_END(); }}; 
	
	
	static RomLoadPtr chplft_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x20000);/* 128k for code */
		ROM_LOAD( "7124.90", 0x00000, 0x8000, 0xe67e1670 );
		ROM_LOAD( "7125.91", 0x10000, 0x8000, 0x56d3a903 );
		ROM_LOAD( "7126.92", 0x18000, 0x8000, 0x2f4c41fa );
	
		ROM_REGION(0x18000);	/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD( "7127.4", 0x00000, 0x8000, 0x684454da );
		ROM_LOAD( "7128.5", 0x08000, 0x8000, 0x60640aac );
		ROM_LOAD( "7129.6", 0x10000, 0x8000, 0x0e274493 );
	
		ROM_REGION(0x20000);
		ROM_LOAD( "7121.87", 0x00000, 0x8000, 0xa4f7add7 );  /* sprites */
		ROM_LOAD( "7120.86", 0x08000, 0x8000, 0xb59f8d71 );
		ROM_LOAD( "7123.89", 0x10000, 0x8000, 0x23911e63 );
		ROM_LOAD( "7122.88", 0x18000, 0x8000, 0x087b75e1 );
	
		ROM_REGION(0x10000);  /* 64k for sound cpu */
		ROM_LOAD( "7130.126", 0x00000, 0x8000, 0xf3ed7509 );
	ROM_END(); }}; 
	
	static RomLoadPtr chplftb_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x20000);/* 128k for code */
		ROM_LOAD( "7152.90", 0x00000, 0x8000, 0x59a80b20 );
		ROM_LOAD( "7153.91", 0x10000, 0x8000, 0xb6d3a903 );
		ROM_LOAD( "7154.92", 0x18000, 0x8000, 0x0c4c50fa );
	
		ROM_REGION(0x18000);	/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD( "7127.4", 0x00000, 0x8000, 0x684454da );
		ROM_LOAD( "7128.5", 0x08000, 0x8000, 0x60640aac );
		ROM_LOAD( "7129.6", 0x10000, 0x8000, 0x0e274493 );
	
		ROM_REGION(0x20000);
		ROM_LOAD( "7121.87", 0x00000, 0x8000, 0xa4f7add7 );  /* sprites */
		ROM_LOAD( "7120.86", 0x08000, 0x8000, 0xb59f8d71 );
		ROM_LOAD( "7123.89", 0x10000, 0x8000, 0x23911e63 );
		ROM_LOAD( "7122.88", 0x18000, 0x8000, 0x087b75e1 );
	
		ROM_REGION(0x10000);  /* 64k for sound cpu */
		ROM_LOAD( "7130.126", 0x00000, 0x8000, 0xf3ed7509 );
	ROM_END(); }}; 
	
	static RomLoadPtr chplftbl_rom = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION(0x20000);/* 128k for code */
		ROM_LOAD( "7124.90", 0x00000, 0x8000, 0xaa09ffb1 );
		ROM_LOAD( "7125.91", 0x10000, 0x8000, 0x56d3a903 );
		ROM_LOAD( "7126.92", 0x18000, 0x8000, 0x2f4c41fa );
	
		ROM_REGION(0x18000);	/* temporary space for graphics (disposed after conversion) */
		ROM_LOAD( "7127.4", 0x00000, 0x8000, 0x684454da );
		ROM_LOAD( "7128.5", 0x08000, 0x8000, 0x60640aac );
		ROM_LOAD( "7129.6", 0x10000, 0x8000, 0x0e274493 );
	
		ROM_REGION(0x20000);
		ROM_LOAD( "7121.87", 0x00000, 0x8000, 0xa4f7add7 );  /* sprites */
		ROM_LOAD( "7120.86", 0x08000, 0x8000, 0xb59f8d71 );
		ROM_LOAD( "7123.89", 0x10000, 0x8000, 0x23911e63 );
		ROM_LOAD( "7122.88", 0x18000, 0x8000, 0x087b75e1 );
	
		ROM_REGION(0x10000);  /* 64k for sound cpu */
		ROM_LOAD( "7130.126", 0x00000, 0x8000, 0xf3ed7509 );
	ROM_END(); }}; 
	
	
	static DecodePtr wbml_decode = new DecodePtr(){ public void handler()
        {
		int A;
	
		for (A = 0x0000;A < 0x8000;A++)
		{
			ROM[A] = RAM[A+0x20000];
		}
	}};
	
	
	static HiscoreLoadPtr wbdeluxe_hiload = new HiscoreLoadPtr() { public int handler() 
	{
		FILE f;
		/* get RAM pointer (this game is multiCPU, we can't assume the global */
		/* RAM pointer is pointing to the right place) */
		char[] RAM= Machine.memory_region[0];
	
		/* check if the hi score table has already been initialized */
		if (memcmp(RAM, 0xC100, new char[] { 0x20,0x11,0x20,0x20 }, 4) == 0)
		{
			if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,0)) != null)
			{
				osd_fread(f,RAM, 0xC100,320);
				osd_fclose(f);
			}
			return 1;
		}
		else return 0;	/* we can't load the hi scores yet */
	} };
	
	static HiscoreSavePtr wbdeluxe_hisave = new HiscoreSavePtr() { public void handler() 
	{
		FILE f;
		/* get RAM pointer (this game is multiCPU, we can't assume the global */
		/* RAM pointer is pointing to the right place) */
		char[] RAM= Machine.memory_region[0];
	
		if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,1)) != null)
		{
			osd_fwrite(f,RAM, 0xC100,320);
			osd_fclose(f);
		}
	} };
	
	
	static HiscoreLoadPtr pitfall2_hiload = new HiscoreLoadPtr() { public int handler() 
	{
		FILE f;
		char[] RAM= Machine.memory_region[0];
	
		/* check if the hi score table has already been initialized */
	
		if (memcmp(RAM, 0xD302, new char[] { 0x02,0x00,0x59,0x41 }, 4) == 0)
		{
			if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,0)) != null)
			{
				osd_fread(f,RAM, 0xD300,56);
				osd_fclose(f);
			}
			return 1;
		}
		else return 0;	/* we can't load the hi scores yet */
	} };
	
	static HiscoreSavePtr pitfall2_hisave = new HiscoreSavePtr() { public void handler() 
	{
		FILE f;
		char[] RAM= Machine.memory_region[0];
	
		if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,1)) != null)
		{
			osd_fwrite(f,RAM, 0xD300,56);
			osd_fclose(f);
		}
	} };
	
	
	static HiscoreLoadPtr choplift_hiload = new HiscoreLoadPtr() { public int handler() 
	{
		FILE f;
		char[] choplifter_ram= Machine.memory_region[0];
	
		/* check if the hi score table has already been initialized */
	
		if (memcmp(choplifter_ram, 0xEF00, new char[] { 0x00,0x00,0x05,0x00  }, 4) == 0)
		{
			if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,0)) != null)
			{
				osd_fread(f,choplifter_ram, 0xEF00,49);
				osd_fclose(f);
			}
			return 1;
		}
		else return 0;	/* we can't load the hi scores yet */
	} };
	
	static HiscoreSavePtr choplift_hisave = new HiscoreSavePtr() { public void handler() 
	{
		FILE f;
		char[] choplifter_ram= Machine.memory_region[0];
	
		if ((f = osd_fopen(Machine.gamedrv.name,null,OSD_FILETYPE_HIGHSCORE,1)) != null)
		{
			osd_fwrite(f,choplifter_ram, 0xEF00,49);
			osd_fclose(f);
		}
	} };
	
	
	
	public static GameDriver wbdeluxe_driver = new GameDriver
	(
		"Wonder Boy Deluxe",
		"wbdeluxe",
		"Jarek Parchanski (MAME driver)\nRoberto Ventura  (hardware info)\nJarek Burczynski (sound)\nMirko Buffoni (additional code)",
		wbdeluxe_machine_driver,
	
		wbdeluxe_rom,
		null, null,   				/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,wbdeluxe_input_ports,null, null, null,/*TODO remove nulls*/
	
		wrong_color_prom, null, null,
		ORIENTATION_DEFAULT,
		wbdeluxe_hiload, wbdeluxe_hisave
	);
	
	
	public static GameDriver wbml_driver = new GameDriver
	(
		"Wonder Boy in Monster Land",
		"wbml",
		"Mirko Buffoni",
		wbml_machine_driver,
	
		wbml_rom,
		null, wbml_decode,   		/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,wbml_input_ports,null, null, null, /*TODO remove nulls*/
	
		wbml_color_prom, null, null,
		ORIENTATION_DEFAULT,
		null, null
	);
	
	
	public static GameDriver pitfall2_driver = new GameDriver
	(
		"Pitfall II",
		"pitfall2",
		"Jarek Parchanski (MAME driver)\nRoberto Ventura  (hardware info)\nJarek Burczynski (sound)\nMirko Buffoni (additional code)",
		pitfall2_machine_driver,
	
		pitfall2_rom,
		null, null,   				/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,pitfall2_input_ports,null, null, null,/*TODO remove nulls*/
	
		wrong_color_prom, null, null,
		ORIENTATION_DEFAULT,
		pitfall2_hiload, pitfall2_hisave
	);
	
	public static GameDriver chplft_driver = new GameDriver
	(
		"Choplifter",
		"chplft",
		"Jarek Parchanski (MAME driver)\nRoberto Ventura  (hardware info)\nRomek Bacza      (digi-sound)\n",
		choplift_machine_driver,
	
		chplft_rom,
		null, null,   				/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,choplift_input_ports,null, null, null,/*TODO remove nulls*/
	
		choplift_color_prom,null,null,
		ORIENTATION_DEFAULT,
		choplift_hiload, choplift_hisave
	);
	
	public static GameDriver chplftb_driver = new GameDriver
	(
		"Choplifter (alternate)",
		"chplftb",
		"Jarek Parchanski (MAME driver)\nRoberto Ventura  (hardware info)\nRomek Bacza      (digi-sound)\n",
		choplift_machine_driver,
	
		chplftb_rom,
		null, null,   				/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,choplift_input_ports,null, null, null,/*TODO remove nulls*/
	
		choplift_color_prom,null,null,
		ORIENTATION_DEFAULT,
		choplift_hiload, choplift_hisave
	);
	
	public static GameDriver chplftbl_driver = new GameDriver
	(
		"Choplifter (bootleg)",
		"chplftbl",
		"Jarek Parchanski (MAME driver)\nRoberto Ventura  (hardware info)\nRomek Bacza      (digi-sound)\n",
		choplift_machine_driver,
	
		chplftbl_rom,
		null, null,   				/* ROM decode and opcode decode functions */
		//null,      				/* Sample names */
		null,
	
		null,choplift_input_ports,null, null, null,/*TODO remove nulls*/
	
		choplift_color_prom,null,null,
		ORIENTATION_DEFAULT,
		choplift_hiload, choplift_hisave
	);
}
